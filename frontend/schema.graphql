"""Global query"""
type Query {
  allLabels(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    sourceId: ID
    sourceId_In: [ID]
    soundId: ID
    soundId_In: [ID]
    parentId: ID
    parentId_In: [ID]
    children_Id: Decimal
    children_Id_In: [ID]
    nickname: String
    nickname_Icontains: String
    acousticDetectors_Id: Decimal
    acousticDetectors_Id_In: [ID]
    channelConfigurationDetectorSpecifications_Id: Decimal
    channelConfigurationDetectorSpecifications_Id_In: [ID]
    shape: SignalShapeEnum
    plurality: SignalPluralityEnum
    minFrequency: Int
    minFrequency_Lt: Int
    minFrequency_Lte: Int
    minFrequency_Gt: Int
    minFrequency_Gte: Int
    maxFrequency: Int
    maxFrequency_Lt: Int
    maxFrequency_Lte: Int
    maxFrequency_Gt: Int
    maxFrequency_Gte: Int
    meanDuration: Float
    meanDuration_Lt: Float
    meanDuration_Lte: Float
    meanDuration_Gt: Float
    meanDuration_Gte: Float
    labels_Id: Decimal
  ): LabelNodeNodeConnection
  labelById(id: ID!): LabelNode
  allSounds(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    parentId: ID
    parentId_In: [ID]
    children_Id: Decimal
    children_Id_In: [ID]
    labels_Id: Decimal
    labels_Id_In: [ID]
    englishName: String
    englishName_Icontains: String
    frenchName: String
    frenchName_Icontains: String
    codeName: String
    codeName_Icontains: String
    taxon: String
    taxon_Icontains: String
  ): SoundNodeNodeConnection
  soundById(id: ID!): SoundNode
  allSources(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    parentId: ID
    parentId_In: [ID]
    children_Id: Decimal
    children_Id_In: [ID]
    labels_Id: Decimal
    labels_Id_In: [ID]
    englishName: String
    englishName_Icontains: String
    latinName: String
    latinName_Icontains: String
    frenchName: String
    frenchName_Icontains: String
    codeName: String
    codeName_Icontains: String
    taxon: String
    taxon_Icontains: String
  ): SourceNodeNodeConnection
  sourceById(id: ID!): SourceNode
  allAuthors(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    order: Int
    order_Lt: Int
    order_Lte: Int
    order_Gt: Int
    order_Gte: Int
    bibliographyId: ID
    bibliographyId_In: [ID]
    contactId: ID
    contactId_In: [ID]
    institutions: Decimal
    institutions_In: [ID]
  ): AuthorNodeNodeConnection
  authorById(id: ID!): AuthorNode
  allTags(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
  ): TagNodeNodeConnection
  tagById(id: ID!): TagNode
  allBibliography(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    title: String
    title_Icontains: String
    doi: String
    tags_Name: String
    tags_Name_In: [String]
    status: StatusEnum
    publicationDate: Date
    publicationDate_Lt: Date
    publicationDate_Lte: Date
    publicationDate_Gt: Date
    publicationDate_Gte: Date
    type: TypeEnum
  ): BibliographyNodeNodeConnection
  bibliographyById(id: ID!): BibliographyNode
  bibliographyArticleById(id: ID!): BibliographyArticleNode
  bibliographySoftwareById(id: ID!): BibliographySoftwareNode
  bibliographyPosterById(id: ID!): BibliographyPosterNode
  bibliographyConferenceById(id: ID!): BibliographyConferenceNode
  allAcousticDetectorSpecifications(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    equipment_Id: Decimal
    equipment_Id_In: [ID]
    detectedLabels_Id: Decimal
    detectedLabels_Id_In: [ID]
    minFrequency: Int
    minFrequency_Lt: Int
    minFrequency_Lte: Int
    minFrequency_Gt: Int
    minFrequency_Gte: Int
    maxFrequency: Int
    maxFrequency_Lt: Int
    maxFrequency_Lte: Int
    maxFrequency_Gt: Int
    maxFrequency_Gte: Int
    algorithmName: String
    algorithmName_Icontains: String
  ): AcousticDetectorSpecificationNodeNodeConnection
  acousticDetectorSpecificationById(id: ID!): AcousticDetectorSpecificationNode
  allEquipments(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    model: String
    model_Icontains: String
    serialNumber: String
    serialNumber_Icontains: String
    ownerId: ID
    ownerId_In: [ID]
    providerId: ID
    providerId_In: [ID]
    storageSpecification_Isnull: Boolean
    recorderSpecification_Isnull: Boolean
    hydrophoneSpecification_Isnull: Boolean
    acousticDetectorSpecification_Isnull: Boolean
    purchaseDate: Date
    purchaseDate_Lt: Date
    purchaseDate_Lte: Date
    purchaseDate_Gt: Date
    purchaseDate_Gte: Date
    name: String
    name_Icontains: String
    batterySlotsCount: Int
    batterySlotsCount_Lt: Int
    batterySlotsCount_Lte: Int
    batterySlotsCount_Gt: Int
    batterySlotsCount_Gte: Int
    batteryType: String
    batteryType_Icontains: String
    cables: String
    cables_Icontains: String
    channelConfigurationDetectorSpecifications_Id: Decimal
    channelConfigurationDetectorSpecifications_Id_In: [ID]
    channelConfigurationHydrophoneSpecifications_Id: Decimal
    channelConfigurationHydrophoneSpecifications_Id_In: [ID]
    channelConfigurationRecorderSpecifications_Id: Decimal
    channelConfigurationRecorderSpecifications_Id_In: [ID]
    channelConfigurations_Id: Decimal
    channelConfigurations_Id_In: [ID]
    maintenances_Id: Decimal
    maintenances_Id_In: [ID]
  ): EquipmentNodeNodeConnection
  equipmentById(id: ID!): EquipmentNode
  allHydrophoneSpecifications(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    equipment_Id: Decimal
    equipment_Id_In: [ID]
    sensitivity: Float
    sensitivity_Lt: Float
    sensitivity_Lte: Float
    sensitivity_Gt: Float
    sensitivity_Gte: Float
    directivity: HydrophoneDirectivityEnum
    operatingMinTemperature: Float
    operatingMinTemperature_Lt: Float
    operatingMinTemperature_Lte: Float
    operatingMinTemperature_Gt: Float
    operatingMinTemperature_Gte: Float
    operatingMaxTemperature: Float
    operatingMaxTemperature_Lt: Float
    operatingMaxTemperature_Lte: Float
    operatingMaxTemperature_Gt: Float
    operatingMaxTemperature_Gte: Float
    minBandwidth: Float
    minBandwidth_Lt: Float
    minBandwidth_Lte: Float
    minBandwidth_Gt: Float
    minBandwidth_Gte: Float
    maxBandwidth: Float
    maxBandwidth_Lt: Float
    maxBandwidth_Lte: Float
    maxBandwidth_Gt: Float
    maxBandwidth_Gte: Float
    minDynamicRange: Float
    minDynamicRange_Lt: Float
    minDynamicRange_Lte: Float
    minDynamicRange_Gt: Float
    minDynamicRange_Gte: Float
    maxDynamicRange: Float
    maxDynamicRange_Lt: Float
    maxDynamicRange_Lte: Float
    maxDynamicRange_Gt: Float
    maxDynamicRange_Gte: Float
    minOperatingDepth: Float
    minOperatingDepth_Lt: Float
    minOperatingDepth_Lte: Float
    minOperatingDepth_Gt: Float
    minOperatingDepth_Gte: Float
    maxOperatingDepth: Float
    maxOperatingDepth_Lt: Float
    maxOperatingDepth_Lte: Float
    maxOperatingDepth_Gt: Float
    maxOperatingDepth_Gte: Float
    noiseFloor: Float
    noiseFloor_Lt: Float
    noiseFloor_Lte: Float
    noiseFloor_Gt: Float
    noiseFloor_Gte: Float
  ): HydrophoneSpecificationNodeNodeConnection
  hydrophoneSpecificationById(id: ID!): HydrophoneSpecificationNode
  allMaintenances(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    typeId: ID
    typeId_In: [ID]
    maintainerId: ID
    maintainerId_In: [ID]
    maintainerInstitutionId: ID
    maintainerInstitutionId_In: [ID]
    platformId: ID
    platformId_In: [ID]
    equipmentId: ID
    equipmentId_In: [ID]
    date: Date
    date_Lt: Date
    date_Lte: Date
    date_Gt: Date
    date_Gte: Date
  ): MaintenanceNodeNodeConnection
  maintenanceById(id: ID!): MaintenanceNode
  allMaintenanceTypes(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
    interval: Float
    interval_Lt: Float
    interval_Lte: Float
    interval_Gt: Float
    interval_Gte: Float
    maintenances_Id: Decimal
    maintenances_Id_In: [ID]
  ): MaintenanceTypeNodeNodeConnection
  maintenanceTypeById(id: ID!): MaintenanceTypeNode
  allPlatforms(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    ownerId: ID
    ownerId_In: [ID]
    providerId: ID
    providerId_In: [ID]
    deployments_Id: Decimal
    deployments_Id_In: [ID]
    maintenances_Id: Decimal
    maintenances_Id_In: [ID]
    name: String
    name_Icontains: String
    type: String
    isMobile: Boolean
  ): PlatformNodeNodeConnection
  platformById(id: ID!): PlatformNode
  allPlatformTypes(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    platforms_Id: Decimal
    platforms_Id_In: [ID]
    name: String
    name_Icontains: String
    isMobile: Boolean
  ): PlatformTypeNodeNodeConnection
  platformTypeById(id: ID!): PlatformTypeNode
  allRecorderSpecifications(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    equipment_Id: Decimal
    equipment_Id_In: [ID]
    channelsCount: Int
    channelsCount_Lt: Int
    channelsCount_Lte: Int
    channelsCount_Gt: Int
    channelsCount_Gte: Int
    storageSlotsCount: Int
    storageSlotsCount_Lt: Int
    storageSlotsCount_Lte: Int
    storageSlotsCount_Gt: Int
    storageSlotsCount_Gte: Int
    storageType: String
    storageType_Icontains: String
  ): RecorderSpecificationNodeNodeConnection
  recorderSpecificationById(id: ID!): RecorderSpecificationNode
  allStorageSpecifications(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    equipment_Id: Decimal
    equipment_Id_In: [ID]
  ): StorageSpecificationNodeNodeConnection
  storageSpecificationById(id: ID!): StorageSpecificationNode
  allAudioProperties(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    file_Id: Decimal
    file_Id_In: [ID]
    samplingFrequency: Int
    samplingFrequency_Lt: Int
    samplingFrequency_Lte: Int
    samplingFrequency_Gt: Int
    samplingFrequency_Gte: Int
    initialTimestamp: DateTime
    initialTimestamp_Lt: DateTime
    initialTimestamp_Lte: DateTime
    initialTimestamp_Gt: DateTime
    initialTimestamp_Gte: DateTime
    duration: Int
    duration_Lt: Int
    duration_Lte: Int
    duration_Gt: Int
    duration_Gte: Int
    sampleDepth: Int
    sampleDepth_Lt: Int
    sampleDepth_Lte: Int
    sampleDepth_Gt: Int
    sampleDepth_Gte: Int
  ): AudioPropertiesNodeNodeConnection
  audioPropertyById(id: ID!): AudioPropertiesNode
  allDetectionProperties(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    file_Id: Decimal
    file_Id_In: [ID]
    start: DateTime
    start_Lt: DateTime
    start_Lte: DateTime
    start_Gt: DateTime
    start_Gte: DateTime
    end: DateTime
    end_Lt: DateTime
    end_Lte: DateTime
    end_Gt: DateTime
    end_Gte: DateTime
  ): DetectionPropertiesNodeNodeConnection
  detectionPropertyById(id: ID!): DetectionPropertiesNode
  allFile(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    filename: String
    filename_Icontains: String
    format: String
    audioPropertiesId: ID
    audioPropertiesId_In: [ID]
    detectionPropertiesId: ID
    detectionPropertiesId_In: [ID]
    storageLocation: String
    storageLocation_Icontains: String
    fileSize: BigInt
    fileSize_Lt: BigInt
    fileSize_Lte: BigInt
    fileSize_Gt: BigInt
    fileSize_Gte: BigInt
    accessibility: AccessibilityEnum
    channelConfigurations_Id: Decimal
    channelConfigurations_Id_In: [ID]
  ): FileNodeNodeConnection
  fileById(id: ID!): FileNode
  allFileFormats(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
    channelConfigurationRecorderSpecifications_Id: Decimal
    channelConfigurationRecorderSpecifications_Id_In: [ID]
    channelConfigurationDetectorSpecifications_Id: Decimal
    channelConfigurationDetectorSpecifications_Id_In: [ID]
    files_Id: Decimal
    files_Id_In: [ID]
  ): FileFormatNodeNodeConnection
  fileFormatById(id: ID!): FileFormatNode
  allCampaigns(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
    projectId: ID
    projectId_In: [ID]
    deployments_Id: Decimal
    deployments_Id_In: [ID]
  ): CampaignNodeNodeConnection
  campaignById(id: ID!): CampaignNode
  allChannelConfigurations(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    recorderSpecification_Isnull: Boolean
    detectorSpecification_Isnull: Boolean
    deploymentId: ID
    deploymentId_In: [ID]
    continuous: Boolean
    dutyCycleOn: Int
    dutyCycleOn_Lt: Int
    dutyCycleOn_Lte: Int
    dutyCycleOn_Gt: Int
    dutyCycleOn_Gte: Int
    dutyCycleOff: Int
    dutyCycleOff_Lt: Int
    dutyCycleOff_Lte: Int
    dutyCycleOff_Gt: Int
    dutyCycleOff_Gte: Int
    instrumentDepth: Int
    instrumentDepth_Lt: Int
    instrumentDepth_Lte: Int
    instrumentDepth_Gt: Int
    instrumentDepth_Gte: Int
    timezone: String
    harvestStartingDate: DateTime
    harvestStartingDate_Lt: DateTime
    harvestStartingDate_Lte: DateTime
    harvestStartingDate_Gt: DateTime
    harvestStartingDate_Gte: DateTime
    harvestEndingDate: DateTime
    harvestEndingDate_Lt: DateTime
    harvestEndingDate_Lte: DateTime
    harvestEndingDate_Gt: DateTime
    harvestEndingDate_Gte: DateTime
    files_Id: Decimal
    files_Id_In: [ID]
    storages_Id: Decimal
    storages_Id_In: [ID]
  ): ChannelConfigurationNodeNodeConnection
  channelConfigurationById(id: ID!): ChannelConfigurationNode
  allChannelConfigurationsDetectorSpecifications(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    detectorId: ID
    detectorId_In: [ID]
    labels_Id: Decimal
    labels_Id_In: [ID]
    channelConfiguration_Id: Decimal
    channelConfiguration_Id_In: [ID]
    outputFormats: String
  ): ChannelConfigurationDetectorSpecificationNodeNodeConnection
  channelConfigurationDetectorSpecificationById(id: ID!): ChannelConfigurationDetectorSpecificationNode
  allChannelConfigurationsRecorderSpecifications(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    hydrophoneId: ID
    hydrophoneId_In: [ID]
    recorderId: ID
    recorderId_In: [ID]
    channelConfiguration_Id: Decimal
    channelConfiguration_Id_In: [ID]
    recordingFormats: String
  ): ChannelConfigurationRecorderSpecificationNodeNodeConnection
  channelConfigurationRecorderSpecificationById(id: ID!): ChannelConfigurationRecorderSpecificationNode
  allDeployments(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    projectId: ID
    projectId_In: [ID]
    siteId: ID
    siteId_In: [ID]
    campaignId: ID
    campaignId_In: [ID]
    platformId: ID
    platformId_In: [ID]
    contacts_Id: Decimal
    contacts_Id_In: [ID]
    mobilePositions_Id: Decimal
    mobilePositions_Id_In: [ID]
    channelConfigurations_Id: Decimal
    channelConfigurations_Id_In: [ID]
    longitude: Float
    longitude_Lt: Float
    longitude_Lte: Float
    longitude_Gt: Float
    longitude_Gte: Float
    latitude: Float
    latitude_Lt: Float
    latitude_Lte: Float
    latitude_Gt: Float
    latitude_Gte: Float
    name: String
    name_Icontains: String
    bathymetricDepth: Int
    bathymetricDepth_Lt: Int
    bathymetricDepth_Lte: Int
    bathymetricDepth_Gt: Int
    bathymetricDepth_Gte: Int
    deploymentDate: DateTime
    deploymentDate_Lt: DateTime
    deploymentDate_Lte: DateTime
    deploymentDate_Gt: DateTime
    deploymentDate_Gte: DateTime
    deploymentVessel: String
    deploymentVessel_Icontains: String
    recoveryDate: DateTime
    recoveryDate_Lt: DateTime
    recoveryDate_Lte: DateTime
    recoveryDate_Gt: DateTime
    recoveryDate_Gte: DateTime
    recoveryVessel: String
    recoveryVessel_Icontains: String
    description_Icontains: String
    project_WebsiteProject_Id: Decimal
  ): DeploymentNodeNodeConnection
  deploymentById(id: ID!): DeploymentNode
  allDeploymentMobilePositions(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    deploymentId: ID
    deploymentId_In: [ID]
    datetime: DateTime
    datetime_Lt: DateTime
    datetime_Lte: DateTime
    datetime_Gt: DateTime
    datetime_Gte: DateTime
    longitude: Float
    longitude_Lt: Float
    longitude_Lte: Float
    longitude_Gt: Float
    longitude_Gte: Float
    latitude: Float
    latitude_Lt: Float
    latitude_Lte: Float
    latitude_Gt: Float
    latitude_Gte: Float
    depth: Float
    depth_Lt: Float
    depth_Lte: Float
    depth_Gt: Float
    depth_Gte: Float
    heading: Float
    heading_Lt: Float
    heading_Lte: Float
    heading_Gt: Float
    heading_Gte: Float
    pitch: Float
    pitch_Lt: Float
    pitch_Lte: Float
    pitch_Gt: Float
    pitch_Gte: Float
    roll: Float
    roll_Lt: Float
    roll_Lte: Float
    roll_Gt: Float
    roll_Gte: Float
  ): DeploymentMobilePositionNodeNodeConnection
  deploymentMobilePositionById(id: ID!): DeploymentMobilePositionNode
  allProjects(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
    contacts_Id: Decimal
    contacts_Id_In: [ID]
    projectType_Id: Decimal
    projectType_Id_In: [ID]
    campaigns_Id: Decimal
    campaigns_Id_In: [ID]
    sites_Id: Decimal
    sites_Id_In: [ID]
    deployments_Id: Decimal
    deployments_Id_In: [ID]
    projectType: Decimal
    accessibility: AccessibilityEnum
    doi: String
    startDate: Date
    startDate_Lte: Date
    startDate_Lt: Date
    startDate_Gte: Date
    startDate_Gt: Date
    endDate: Date
    endDate_Lte: Date
    endDate_Lt: Date
    endDate_Gte: Date
    endDate_Gt: Date
    projectGoal: String
    projectGoal_Icontains: String
    financing: FinancingEnum
  ): ProjectNodeOverrideNodeConnection
  projectById(id: ID!): ProjectNode
  allProjectTypes(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
    projects_Id: Decimal
    projects_Id_In: [ID]
  ): ProjectTypeNodeNodeConnection
  projectTypeById(id: ID!): ProjectTypeNode
  allSites(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    name: String
    name_Icontains: String
    projectId: ID
    projectId_In: [ID]
    deployments_Id: Decimal
    deployments_Id_In: [ID]
  ): SiteNodeNodeConnection
  siteById(id: ID!): SiteNode
  allContacts(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    roles_Id: Decimal
    ownedEquipments_Id: Decimal
    ownedPlatforms_Id: Decimal
    performedMaintenances_Id: Decimal
    providedEquipments_Id: Decimal
    providedPlatforms_Id: Decimal
  ): ContactNodeNodeConnection
  contactById(id: ID!): ContactNode
  allContactRoles(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
    id_In: [ID]
    role: RoleEnum
    contact_Id: Decimal
    contact_Id_In: [ID]
    contact_FirstName: String
    contact_FirstName_Icontains: String
    contact_LastName: String
    contact_LastName_Icontains: String
    contact_Mail: String
    contact_Mail_Icontains: String
    contact_Website: String
    contact_Website_Icontains: String
    institution_Id: Decimal
    institution_Id_In: [ID]
    institution_Name: String
    institution_Name_Icontains: String
    institution_Mail: String
    institution_Mail_Icontains: String
    institution_Website: String
    institution_Website_Icontains: String
    deployments_Id: Decimal
    deployments_Id_In: [ID]
    projects_Id: Decimal
    projects_Id_In: [ID]
  ): ContactRoleNodeNodeConnection
  contactRoleById(id: ID!): ContactRoleNode
  allInstitutions(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    bibliographyAuthors_Id: Decimal
    contacts_Id: Decimal
    providedEquipments_Id: Decimal
    ownedEquipments_Id: Decimal
    providedPlatforms_Id: Decimal
    ownedPlatforms_Id: Decimal
    roles_Id: Decimal
    performedMaintenances_Id: Decimal
  ): InstitutionNodeNodeConnection
  institutionById(id: ID!): InstitutionNode
  allWebsiteProjects(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    id: ID
  ): WebsiteProjectNodeNodeConnection
  websiteProjetById(pk: ID!): WebsiteProjectNode
  _debug: DjangoDebug
  allColormaps(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
  ): ColormapNodeNodeConnection
  allDatasets(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    createdAt: DateTime
    name: String
    description: String
    path: String
    owner: ID
    legacy: Boolean
    relatedChannelConfigurations: ID

    """Ordering"""
    orderBy: String
  ): DatasetNodeNodeConnection
  allFfts(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    nfft: Int
    window: String
    windowSize: Int
    overlap: Decimal
    samplingFrequency: Int
    scaling: String
    legacy: Boolean
  ): FFTNodeNodeConnection
  allLegacySpectrogramConfigurations(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    folder: String
    zoomLevel: Int
    hpFilterMinFrequency: Int
    dataNormalization: String
    frequencyResolution: Float
    spectrogramNormalization: String
    zscoreDuration: String
    windowType: String
    peakVoltage: Float
    sensitivityDb: Float
    temporalResolution: Float
    linearFrequencyScale: ID
    multiLinearFrequencyScale: ID
  ): LegacySpectrogramConfigurationNodeNodeConnection
  allLinearScales(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
    ratio: Float
    minValue: Float
    maxValue: Float
  ): LinearScaleNodeNodeConnection
  allMultiLinearScales(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
    innerScales: ID
  ): MultiLinearScaleNodeNodeConnection
  allSpectrograms(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    format: ID
    filename: String
    start: DateTime
    end: DateTime
    analysis: ID
  ): SpectrogramNodeNodeConnection
  allSpectrogramAnalysis(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    createdAt: DateTime
    name: String
    description: String
    path: String
    legacy: Boolean
    startDate: Date
    endDate: Date
    owner: ID
    dataset: ID
    dataDuration: Float
    fft: ID
    colormap: ID
    legacyConfiguration: ID
    dynamicMin: Float
    dynamicMax: Float
  ): SpectrogramAnalysisNodeNodeConnection
  allDatasetsAvailableForImport: [ImportDatasetType]
  allArchives(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    date: DateTime
    byUser: ID
  ): ArchiveNodeNodeConnection
  allAcousticFeatures(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    startFrequency: Float
    endFrequency: Float
    relativeMaxFrequencyCount: Int
    relativeMinFrequencyCount: Int
    hasHarmonics: Boolean
    trend: ApiAcousticFeaturesTrendChoices
    stepsCount: Int
  ): AcousticFeaturesNodeNodeConnection
  allAnnotations(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    type: ApiAnnotationTypeChoices
    startTime: Float
    endTime: Float
    startFrequency: Float
    endFrequency: Float
    label: ID
    confidence: ID
    annotationPhase: ID
    annotator: ID
    annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices
    spectrogram: ID
    detectorConfiguration: ID
    acousticFeatures: ID
    isUpdateOf: ID
    createdAt: DateTime
    lastUpdatedAt: DateTime
  ): AnnotationNodeNodeConnection
  allAnnotationCampaigns(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    createdAt: DateTime
    name: String
    description: String
    instructionsUrl: String
    deadline: Date
    labelSet: ID
    labelsWithAcousticFeatures: ID
    allowPointAnnotation: Boolean
    dataset: ID
    analysis: ID
    allowImageTuning: Boolean
    allowColormapTuning: Boolean
    colormapDefault: String
    colormapInvertedDefault: Boolean
    owner: ID
    confidenceSet: ID
    archive: ID
  ): AnnotationCampaignNodeNodeConnection
  allAnnotationComments(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    comment: String
    annotation: ID
    annotationPhase: ID
    author: ID
    spectrogram: ID
  ): AnnotationCommentNodeNodeConnection
  allAnnotationFileRanges(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    firstFileIndex: Int
    lastFileIndex: Int
    fromDatetime: DateTime
    toDatetime: DateTime
    filesCount: Int
    annotator: ID
    annotationPhase: ID
  ): AnnotationFileRangeNodeNodeConnection
  allAnnotationPhases(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    phase: ApiAnnotationPhasePhaseChoices
    annotationCampaign: ID
    createdAt: DateTime
    createdBy: ID
    endedAt: DateTime
    endedBy: ID
  ): AnnotationPhaseNodeNodeConnection
  allAnnotationTasks(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    status: ApiAnnotationTaskStatusChoices
    annotationPhase: ID
    annotator: ID
    spectrogram: ID
    sessions: [ID]
  ): AnnotationTaskNodeNodeConnection
  allAnnotationValidations(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    annotation: ID
    annotator: ID
    isValid: Boolean
    createdAt: DateTime
    lastUpdatedAt: DateTime
  ): AnnotationValidationNodeNodeConnection
  allConfidences(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    label: String
    level: Int
  ): ConfidenceNodeNodeConnection
  allConfidenceSets(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
    desc: String
    confidenceIndicators: ID
  ): ConfidenceSetNodeNodeConnection
  allDetectors(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
    specification: ID
  ): DetectorNodeNodeConnection
  allDetectorConfigurations(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    configuration: String
    detector: ID
  ): DetectorConfigurationNodeNodeConnection
  allAnnotationLabels(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
    metadataxLabel: ID
  ): LabelNodeNodeConnection
  allLabelSets(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    name: String
    description: String
    labels: ID
  ): LabelSetNodeNodeConnection
}

type LabelNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [LabelNode]!
  totalCount: Int
}

type PageInfoExtra {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
}

type LabelNode implements Node {
  id: ID!
  source: SourceNode!
  sound: SoundNode
  nickname: String

  """Other name found in the bibliography for this label"""
  associatedNames: [String]
  relatedBibliography(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!
  parent: LabelNode
  shape: SignalShapeEnum
  plurality: SignalPluralityEnum
  minFrequency: Int
  maxFrequency: Int
  meanDuration: Float
  description: String
  children(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], sourceId: ID, sourceId_In: [ID], soundId: ID, soundId_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], nickname: String, nickname_Icontains: String, acousticDetectors_Id: Decimal, acousticDetectors_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], shape: SignalShapeEnum, plurality: SignalPluralityEnum, minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, meanDuration: Float, meanDuration_Lt: Float, meanDuration_Lte: Float, meanDuration_Gt: Float, meanDuration_Gte: Float, labels_Id: Decimal): LabelNodeConnection!
  labelSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, metadataxLabel: ID): LabelNodeConnection!
  acousticDetectors(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], equipment_Id: Decimal, equipment_Id_In: [ID], detectedLabels_Id: Decimal, detectedLabels_Id_In: [ID], minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, algorithmName: String, algorithmName_Icontains: String): AcousticDetectorSpecificationNodeConnection!
  channelConfigurationDetectorSpecifications(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], detectorId: ID, detectorId_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], channelConfiguration_Id: Decimal, channelConfiguration_Id_In: [ID], outputFormats: String): ChannelConfigurationDetectorSpecificationNodeConnection!
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

type SourceNode implements Node {
  id: ID!
  englishName: String!
  latinName: String
  frenchName: String
  codeName: String
  taxon: String
  parent: SourceNode
  relatedBibliography(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!
  children(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], englishName: String, englishName_Icontains: String, latinName: String, latinName_Icontains: String, frenchName: String, frenchName_Icontains: String, codeName: String, codeName_Icontains: String, taxon: String, taxon_Icontains: String): SourceNodeConnection!
  labels(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], sourceId: ID, sourceId_In: [ID], soundId: ID, soundId_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], nickname: String, nickname_Icontains: String, acousticDetectors_Id: Decimal, acousticDetectors_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], shape: SignalShapeEnum, plurality: SignalPluralityEnum, minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, meanDuration: Float, meanDuration_Lt: Float, meanDuration_Lte: Float, meanDuration_Gt: Float, meanDuration_Gte: Float, labels_Id: Decimal): LabelNodeConnection!
}

type BibliographyNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [BibliographyNodeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `BibliographyNode` and its cursor."""
type BibliographyNodeEdge {
  """The item at the end of the edge"""
  node: BibliographyNode

  """A cursor for use in pagination"""
  cursor: String!
}

type BibliographyNode implements Node {
  id: ID!
  title: String!
  doi: String
  tags(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String): TagNodeConnection!
  status: StatusEnum

  """Required for any published bibliography"""
  publicationDate: Date
  type: TypeEnum!

  """Each information is dedicated to one file."""
  softwareInformation: BibliographySoftwareNode

  """Each information is dedicated to one file."""
  articleInformation: BibliographyArticleNode
  conferenceInformation: BibliographyConferenceNode

  """Each information is dedicated to one file."""
  posterInformation: BibliographyPosterNode
  authors(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], order: Int, order_Lt: Int, order_Lte: Int, order_Gt: Int, order_Gte: Int, bibliographyId: ID, bibliographyId_In: [ID], contactId: ID, contactId_In: [ID], institutions: Decimal, institutions_In: [ID]): AuthorNodeConnection!
  relatedSounds(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], englishName: String, englishName_Icontains: String, frenchName: String, frenchName_Icontains: String, codeName: String, codeName_Icontains: String, taxon: String, taxon_Icontains: String): SoundNodeConnection!
  relatedSources(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], englishName: String, englishName_Icontains: String, latinName: String, latinName_Icontains: String, frenchName: String, frenchName_Icontains: String, codeName: String, codeName_Icontains: String, taxon: String, taxon_Icontains: String): SourceNodeConnection!
  relatedLabels(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], sourceId: ID, sourceId_In: [ID], soundId: ID, soundId_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], nickname: String, nickname_Icontains: String, acousticDetectors_Id: Decimal, acousticDetectors_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], shape: SignalShapeEnum, plurality: SignalPluralityEnum, minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, meanDuration: Float, meanDuration_Lt: Float, meanDuration_Lte: Float, meanDuration_Gt: Float, meanDuration_Gte: Float, labels_Id: Decimal): LabelNodeConnection!
  relatedProjects(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, contacts_Id: Decimal, contacts_Id_In: [ID], projectType_Id: Decimal, projectType_Id_In: [ID], campaigns_Id: Decimal, campaigns_Id_In: [ID], sites_Id: Decimal, sites_Id_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID], projectType: Decimal, accessibility: AccessibilityEnum, doi: String, startDate: Date, startDate_Lte: Date, startDate_Lt: Date, startDate_Gte: Date, startDate_Gt: Date, endDate: Date, endDate_Lte: Date, endDate_Lt: Date, endDate_Gte: Date, endDate_Gt: Date, projectGoal: String, projectGoal_Icontains: String, financing: FinancingEnum): ProjectNodeOverrideConnection!
}

type TagNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TagNodeEdge]!
}

"""A Relay edge containing a `TagNode` and its cursor."""
type TagNodeEdge {
  """The item at the end of the edge"""
  node: TagNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TagNode implements Node {
  id: ID!
  name: String!
  bibliographySet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!
}

scalar StatusEnum

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

scalar TypeEnum

type BibliographySoftwareNode implements Node {
  id: ID!

  """Required for a software"""
  publicationPlace: String!
  repositoryUrl: String
  bibliography: BibliographyNode
}

type BibliographyArticleNode implements Node {
  id: ID!

  """Required for an article"""
  journal: String!
  volumes: String
  pagesFrom: Int
  pagesTo: Int
  issueNb: Int
  articleNb: Int
  bibliography: BibliographyNode
}

type BibliographyConferenceNode implements Node {
  id: ID!

  """Required for a conference"""
  conferenceName: String!

  """Required for a conference (format: {City}, {Country})"""
  conferenceLocation: String!
  conferenceAbstractBookUrl: String
  bibliography(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!
}

type BibliographyPosterNode implements Node {
  id: ID!
  posterUrl: String
  bibliography: BibliographyNode
}

type AuthorNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AuthorNodeEdge]!
}

"""A Relay edge containing a `AuthorNode` and its cursor."""
type AuthorNodeEdge {
  """The item at the end of the edge"""
  node: AuthorNode

  """A cursor for use in pagination"""
  cursor: String!
}

type AuthorNode implements Node {
  """The ID of the object"""
  id: ID!
  order: Int!
  bibliography: BibliographyNode!
  contact: ContactNode
  institutions(offset: Int, before: String, after: String, first: Int, last: Int, bibliographyAuthors_Id: Decimal, contacts_Id: Decimal, providedEquipments_Id: Decimal, ownedEquipments_Id: Decimal, providedPlatforms_Id: Decimal, ownedPlatforms_Id: Decimal, roles_Id: Decimal, performedMaintenances_Id: Decimal): InstitutionNodeConnection!
}

type ContactNode implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  mail: String
  website: String
  currentInstitutions(offset: Int, before: String, after: String, first: Int, last: Int, bibliographyAuthors_Id: Decimal, contacts_Id: Decimal, providedEquipments_Id: Decimal, ownedEquipments_Id: Decimal, providedPlatforms_Id: Decimal, ownedPlatforms_Id: Decimal, roles_Id: Decimal, performedMaintenances_Id: Decimal): InstitutionNodeConnection!
  roles(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], role: RoleEnum, contact_Id: Decimal, contact_Id_In: [ID], contact_FirstName: String, contact_FirstName_Icontains: String, contact_LastName: String, contact_LastName_Icontains: String, contact_Mail: String, contact_Mail_Icontains: String, contact_Website: String, contact_Website_Icontains: String, institution_Id: Decimal, institution_Id_In: [ID], institution_Name: String, institution_Name_Icontains: String, institution_Mail: String, institution_Mail_Icontains: String, institution_Website: String, institution_Website_Icontains: String, deployments_Id: Decimal, deployments_Id_In: [ID], projects_Id: Decimal, projects_Id_In: [ID]): ContactRoleNodeConnection!
  authors(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], order: Int, order_Lt: Int, order_Lte: Int, order_Gt: Int, order_Gte: Int, bibliographyId: ID, bibliographyId_In: [ID], contactId: ID, contactId_In: [ID], institutions: Decimal, institutions_In: [ID]): AuthorNodeConnection!
  performedMaintenances(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], typeId: ID, typeId_In: [ID], maintainerId: ID, maintainerId_In: [ID], maintainerInstitutionId: ID, maintainerInstitutionId_In: [ID], platformId: ID, platformId_In: [ID], equipmentId: ID, equipmentId_In: [ID], date: Date, date_Lt: Date, date_Lte: Date, date_Gt: Date, date_Gte: Date): MaintenanceNodeConnection!
}

type InstitutionNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [InstitutionNodeEdge]!
}

"""A Relay edge containing a `InstitutionNode` and its cursor."""
type InstitutionNodeEdge {
  """The item at the end of the edge"""
  node: InstitutionNode

  """A cursor for use in pagination"""
  cursor: String!
}

type InstitutionNode implements Node {
  id: ID!
  name: String!
  city: String!
  country: String!
  mail: String
  website: String
  contacts(offset: Int, before: String, after: String, first: Int, last: Int, roles_Id: Decimal, ownedEquipments_Id: Decimal, ownedPlatforms_Id: Decimal, performedMaintenances_Id: Decimal, providedEquipments_Id: Decimal, providedPlatforms_Id: Decimal): ContactNodeConnection!
  roles(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], role: RoleEnum, contact_Id: Decimal, contact_Id_In: [ID], contact_FirstName: String, contact_FirstName_Icontains: String, contact_LastName: String, contact_LastName_Icontains: String, contact_Mail: String, contact_Mail_Icontains: String, contact_Website: String, contact_Website_Icontains: String, institution_Id: Decimal, institution_Id_In: [ID], institution_Name: String, institution_Name_Icontains: String, institution_Mail: String, institution_Mail_Icontains: String, institution_Website: String, institution_Website_Icontains: String, deployments_Id: Decimal, deployments_Id_In: [ID], projects_Id: Decimal, projects_Id_In: [ID]): ContactRoleNodeConnection!
  bibliographyAuthors(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], order: Int, order_Lt: Int, order_Lte: Int, order_Gt: Int, order_Gte: Int, bibliographyId: ID, bibliographyId_In: [ID], contactId: ID, contactId_In: [ID], institutions: Decimal, institutions_In: [ID]): AuthorNodeConnection!
  ownedEquipments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!
  providedEquipments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!
  ownedPlatforms(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID], name: String, name_Icontains: String, type: String, isMobile: Boolean): PlatformNodeConnection!
  providedPlatforms(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID], name: String, name_Icontains: String, type: String, isMobile: Boolean): PlatformNodeConnection!
  performedMaintenances(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], typeId: ID, typeId_In: [ID], maintainerId: ID, maintainerId_In: [ID], maintainerInstitutionId: ID, maintainerInstitutionId_In: [ID], platformId: ID, platformId_In: [ID], equipmentId: ID, equipmentId_In: [ID], date: Date, date_Lt: Date, date_Lte: Date, date_Gt: Date, date_Gte: Date): MaintenanceNodeConnection!
}

type ContactNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ContactNodeEdge]!
}

"""A Relay edge containing a `ContactNode` and its cursor."""
type ContactNodeEdge {
  """The item at the end of the edge"""
  node: ContactNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

type ContactRoleNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ContactRoleNodeEdge]!
}

"""A Relay edge containing a `ContactRoleNode` and its cursor."""
type ContactRoleNodeEdge {
  """The item at the end of the edge"""
  node: ContactRoleNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ContactRoleNode implements Node {
  id: ID!
  contact: ContactNode
  institution: InstitutionNode
  role: RoleEnum

  """Should have at least one 'Main Contact'"""
  projects(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, contacts_Id: Decimal, contacts_Id_In: [ID], projectType_Id: Decimal, projectType_Id_In: [ID], campaigns_Id: Decimal, campaigns_Id_In: [ID], sites_Id: Decimal, sites_Id_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID], projectType: Decimal, accessibility: AccessibilityEnum, doi: String, startDate: Date, startDate_Lte: Date, startDate_Lt: Date, startDate_Gte: Date, startDate_Gt: Date, endDate: Date, endDate_Lte: Date, endDate_Lt: Date, endDate_Gte: Date, endDate_Gt: Date, projectGoal: String, projectGoal_Icontains: String, financing: FinancingEnum): ProjectNodeOverrideConnection!

  """Contacts related to the deployment."""
  deployments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], projectId: ID, projectId_In: [ID], siteId: ID, siteId_In: [ID], campaignId: ID, campaignId_In: [ID], platformId: ID, platformId_In: [ID], contacts_Id: Decimal, contacts_Id_In: [ID], mobilePositions_Id: Decimal, mobilePositions_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, name: String, name_Icontains: String, bathymetricDepth: Int, bathymetricDepth_Lt: Int, bathymetricDepth_Lte: Int, bathymetricDepth_Gt: Int, bathymetricDepth_Gte: Int, deploymentDate: DateTime, deploymentDate_Lt: DateTime, deploymentDate_Lte: DateTime, deploymentDate_Gt: DateTime, deploymentDate_Gte: DateTime, deploymentVessel: String, deploymentVessel_Icontains: String, recoveryDate: DateTime, recoveryDate_Lt: DateTime, recoveryDate_Lte: DateTime, recoveryDate_Gt: DateTime, recoveryDate_Gte: DateTime, recoveryVessel: String, recoveryVessel_Icontains: String, description_Icontains: String, project_WebsiteProject_Id: Decimal): DeploymentNodeConnection!
}

scalar RoleEnum

type ProjectNodeOverrideConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProjectNodeOverrideEdge]!
}

"""A Relay edge containing a `ProjectNodeOverride` and its cursor."""
type ProjectNodeOverrideEdge {
  """The item at the end of the edge"""
  node: ProjectNodeOverride

  """A cursor for use in pagination"""
  cursor: String!
}

type ProjectNodeOverride implements Node {
  id: ID!

  """Name of the project"""
  name: String!

  """Should have at least one 'Main Contact'"""
  contacts(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], role: RoleEnum, contact_Id: Decimal, contact_Id_In: [ID], contact_FirstName: String, contact_FirstName_Icontains: String, contact_LastName: String, contact_LastName_Icontains: String, contact_Mail: String, contact_Mail_Icontains: String, contact_Website: String, contact_Website_Icontains: String, institution_Id: Decimal, institution_Id_In: [ID], institution_Name: String, institution_Name_Icontains: String, institution_Mail: String, institution_Mail_Icontains: String, institution_Website: String, institution_Website_Icontains: String, deployments_Id: Decimal, deployments_Id_In: [ID], projects_Id: Decimal, projects_Id_In: [ID]): ContactRoleNodeConnection!
  accessibility: AccessibilityEnum

  """Digital Object Identifier of the data, if existing."""
  doi: String

  """
  Description of the type of the project (e.g., research, marine renewable energies, long monitoring,...).
  """
  projectType: ProjectTypeNode
  startDate: Date
  endDate: Date

  """Description of the goal of the project."""
  projectGoal: String
  financing: FinancingEnum
  relatedBibliography(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!

  """Project associated to this campaign"""
  campaigns(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, projectId: ID, projectId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID]): CampaignNodeConnection!

  """Project associated to this site"""
  sites(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, projectId: ID, projectId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID]): SiteNodeConnection!

  """Project associated to this deployment"""
  deployments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], projectId: ID, projectId_In: [ID], siteId: ID, siteId_In: [ID], campaignId: ID, campaignId_In: [ID], platformId: ID, platformId_In: [ID], contacts_Id: Decimal, contacts_Id_In: [ID], mobilePositions_Id: Decimal, mobilePositions_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, name: String, name_Icontains: String, bathymetricDepth: Int, bathymetricDepth_Lt: Int, bathymetricDepth_Lte: Int, bathymetricDepth_Gt: Int, bathymetricDepth_Gte: Int, deploymentDate: DateTime, deploymentDate_Lt: DateTime, deploymentDate_Lte: DateTime, deploymentDate_Gt: DateTime, deploymentDate_Gte: DateTime, deploymentVessel: String, deploymentVessel_Icontains: String, recoveryDate: DateTime, recoveryDate_Lt: DateTime, recoveryDate_Lte: DateTime, recoveryDate_Gt: DateTime, recoveryDate_Gte: DateTime, recoveryVessel: String, recoveryVessel_Icontains: String, description_Icontains: String, project_WebsiteProject_Id: Decimal): DeploymentNodeConnection!
  websiteProject: WebsiteProjectNode
}

scalar AccessibilityEnum

type ProjectTypeNode implements Node {
  id: ID!

  """Description of the type of the project"""
  name: String!

  """
  Description of the type of the project (e.g., research, marine renewable energies, long monitoring,...).
  """
  projects(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, contacts_Id: Decimal, contacts_Id_In: [ID], projectType_Id: Decimal, projectType_Id_In: [ID], campaigns_Id: Decimal, campaigns_Id_In: [ID], sites_Id: Decimal, sites_Id_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID], projectType: Decimal, accessibility: AccessibilityEnum, doi: String, startDate: Date, startDate_Lte: Date, startDate_Lt: Date, startDate_Gte: Date, startDate_Gt: Date, endDate: Date, endDate_Lte: Date, endDate_Lt: Date, endDate_Gte: Date, endDate_Gt: Date, projectGoal: String, projectGoal_Icontains: String, financing: FinancingEnum): ProjectNodeOverrideConnection!
}

scalar FinancingEnum

type CampaignNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CampaignNodeEdge]!
}

"""A Relay edge containing a `CampaignNode` and its cursor."""
type CampaignNodeEdge {
  """The item at the end of the edge"""
  node: CampaignNode

  """A cursor for use in pagination"""
  cursor: String!
}

type CampaignNode implements Node {
  id: ID!

  """Name of the campaign during which the instrument was deployed."""
  name: String!

  """Project associated to this campaign"""
  project: ProjectNodeOverride!

  """Campaign during which the instrument was deployed."""
  deployments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], projectId: ID, projectId_In: [ID], siteId: ID, siteId_In: [ID], campaignId: ID, campaignId_In: [ID], platformId: ID, platformId_In: [ID], contacts_Id: Decimal, contacts_Id_In: [ID], mobilePositions_Id: Decimal, mobilePositions_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, name: String, name_Icontains: String, bathymetricDepth: Int, bathymetricDepth_Lt: Int, bathymetricDepth_Lte: Int, bathymetricDepth_Gt: Int, bathymetricDepth_Gte: Int, deploymentDate: DateTime, deploymentDate_Lt: DateTime, deploymentDate_Lte: DateTime, deploymentDate_Gt: DateTime, deploymentDate_Gte: DateTime, deploymentVessel: String, deploymentVessel_Icontains: String, recoveryDate: DateTime, recoveryDate_Lt: DateTime, recoveryDate_Lte: DateTime, recoveryDate_Gt: DateTime, recoveryDate_Gte: DateTime, recoveryVessel: String, recoveryVessel_Icontains: String, description_Icontains: String, project_WebsiteProject_Id: Decimal): DeploymentNodeConnection!
}

type DeploymentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DeploymentNodeEdge]!
}

"""A Relay edge containing a `DeploymentNode` and its cursor."""
type DeploymentNodeEdge {
  """The item at the end of the edge"""
  node: DeploymentNode

  """A cursor for use in pagination"""
  cursor: String!
}

type DeploymentNode implements Node {
  id: ID!

  """Project associated to this deployment"""
  project: ProjectNodeOverride!

  """Longitude of the platform position (WGS84 decimal degree)."""
  longitude: Float!

  """Latitude of the platform position (WGS84 decimal degrees)."""
  latitude: Float!

  """Name of the deployment."""
  name: String

  """
  Conceptual location. A site may group together several platforms in relatively close proximity, or describes a location where regular deployments are carried out.
  """
  site: SiteNode

  """Campaign during which the instrument was deployed."""
  campaign: CampaignNode

  """Support of the deployed instruments"""
  platform: PlatformNode

  """
  Underwater depth of ocean floor at the platform position (in positive meters).
  """
  bathymetricDepth: Int

  """Date and time at which the measurement system was deployed in UTC."""
  deploymentDate: DateTime

  """Name of the vehicle associated with the deployment."""
  deploymentVessel: String

  """Date and time at which the measurement system was recovered in UTC."""
  recoveryDate: DateTime

  """Name of the vehicle associated with the recovery."""
  recoveryVessel: String

  """Contacts related to the deployment."""
  contacts(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], role: RoleEnum, contact_Id: Decimal, contact_Id_In: [ID], contact_FirstName: String, contact_FirstName_Icontains: String, contact_LastName: String, contact_LastName_Icontains: String, contact_Mail: String, contact_Mail_Icontains: String, contact_Website: String, contact_Website_Icontains: String, institution_Id: Decimal, institution_Id_In: [ID], institution_Name: String, institution_Name_Icontains: String, institution_Mail: String, institution_Mail_Icontains: String, institution_Website: String, institution_Website_Icontains: String, deployments_Id: Decimal, deployments_Id_In: [ID], projects_Id: Decimal, projects_Id_In: [ID]): ContactRoleNodeConnection!

  """
  Optional description of deployment and recovery conditions (weather, technical issues,...).
  """
  description: String
  channelConfigurations(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], recorderSpecification_Isnull: Boolean, detectorSpecification_Isnull: Boolean, deploymentId: ID, deploymentId_In: [ID], continuous: Boolean, dutyCycleOn: Int, dutyCycleOn_Lt: Int, dutyCycleOn_Lte: Int, dutyCycleOn_Gt: Int, dutyCycleOn_Gte: Int, dutyCycleOff: Int, dutyCycleOff_Lt: Int, dutyCycleOff_Lte: Int, dutyCycleOff_Gt: Int, dutyCycleOff_Gte: Int, instrumentDepth: Int, instrumentDepth_Lt: Int, instrumentDepth_Lte: Int, instrumentDepth_Gt: Int, instrumentDepth_Gte: Int, timezone: String, harvestStartingDate: DateTime, harvestStartingDate_Lt: DateTime, harvestStartingDate_Lte: DateTime, harvestStartingDate_Gt: DateTime, harvestStartingDate_Gte: DateTime, harvestEndingDate: DateTime, harvestEndingDate_Lt: DateTime, harvestEndingDate_Lte: DateTime, harvestEndingDate_Gt: DateTime, harvestEndingDate_Gte: DateTime, files_Id: Decimal, files_Id_In: [ID], storages_Id: Decimal, storages_Id_In: [ID]): ChannelConfigurationNodeConnection!

  """Related deployment"""
  mobilePositions(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], deploymentId: ID, deploymentId_In: [ID], datetime: DateTime, datetime_Lt: DateTime, datetime_Lte: DateTime, datetime_Gt: DateTime, datetime_Gte: DateTime, longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, depth: Float, depth_Lt: Float, depth_Lte: Float, depth_Gt: Float, depth_Gte: Float, heading: Float, heading_Lt: Float, heading_Lte: Float, heading_Gt: Float, heading_Gte: Float, pitch: Float, pitch_Lt: Float, pitch_Lte: Float, pitch_Gt: Float, pitch_Gte: Float, roll: Float, roll_Lt: Float, roll_Lte: Float, roll_Gt: Float, roll_Gte: Float): DeploymentMobilePositionNodeConnection!
}

type SiteNode implements Node {
  id: ID!

  """
  Name of the platform conceptual location. A site may group together several platforms in relatively close proximity, or describes a location where regular deployments are carried out.
  """
  name: String!

  """Project associated to this site"""
  project: ProjectNodeOverride!

  """
  Conceptual location. A site may group together several platforms in relatively close proximity, or describes a location where regular deployments are carried out.
  """
  deployments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], projectId: ID, projectId_In: [ID], siteId: ID, siteId_In: [ID], campaignId: ID, campaignId_In: [ID], platformId: ID, platformId_In: [ID], contacts_Id: Decimal, contacts_Id_In: [ID], mobilePositions_Id: Decimal, mobilePositions_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, name: String, name_Icontains: String, bathymetricDepth: Int, bathymetricDepth_Lt: Int, bathymetricDepth_Lte: Int, bathymetricDepth_Gt: Int, bathymetricDepth_Gte: Int, deploymentDate: DateTime, deploymentDate_Lt: DateTime, deploymentDate_Lte: DateTime, deploymentDate_Gt: DateTime, deploymentDate_Gte: DateTime, deploymentVessel: String, deploymentVessel_Icontains: String, recoveryDate: DateTime, recoveryDate_Lt: DateTime, recoveryDate_Lte: DateTime, recoveryDate_Gt: DateTime, recoveryDate_Gte: DateTime, recoveryVessel: String, recoveryVessel_Icontains: String, description_Icontains: String, project_WebsiteProject_Id: Decimal): DeploymentNodeConnection!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type PlatformNode implements Node {
  id: ID!
  owner: InstitutionNode!
  provider: InstitutionNode!
  type: PlatformTypeNode!
  name: String
  description: String
  maintenances(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], typeId: ID, typeId_In: [ID], maintainerId: ID, maintainerId_In: [ID], maintainerInstitutionId: ID, maintainerInstitutionId_In: [ID], platformId: ID, platformId_In: [ID], equipmentId: ID, equipmentId_In: [ID], date: Date, date_Lt: Date, date_Lte: Date, date_Gt: Date, date_Gte: Date): MaintenanceNodeConnection!

  """Support of the deployed instruments"""
  deployments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], projectId: ID, projectId_In: [ID], siteId: ID, siteId_In: [ID], campaignId: ID, campaignId_In: [ID], platformId: ID, platformId_In: [ID], contacts_Id: Decimal, contacts_Id_In: [ID], mobilePositions_Id: Decimal, mobilePositions_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, name: String, name_Icontains: String, bathymetricDepth: Int, bathymetricDepth_Lt: Int, bathymetricDepth_Lte: Int, bathymetricDepth_Gt: Int, bathymetricDepth_Gte: Int, deploymentDate: DateTime, deploymentDate_Lt: DateTime, deploymentDate_Lte: DateTime, deploymentDate_Gt: DateTime, deploymentDate_Gte: DateTime, deploymentVessel: String, deploymentVessel_Icontains: String, recoveryDate: DateTime, recoveryDate_Lt: DateTime, recoveryDate_Lte: DateTime, recoveryDate_Gt: DateTime, recoveryDate_Gte: DateTime, recoveryVessel: String, recoveryVessel_Icontains: String, description_Icontains: String, project_WebsiteProject_Id: Decimal): DeploymentNodeConnection!
}

type PlatformTypeNode implements Node {
  id: ID!
  name: String!
  isMobile: Boolean!
  platforms(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID], name: String, name_Icontains: String, type: String, isMobile: Boolean): PlatformNodeConnection!
}

type PlatformNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PlatformNodeEdge]!
}

"""A Relay edge containing a `PlatformNode` and its cursor."""
type PlatformNodeEdge {
  """The item at the end of the edge"""
  node: PlatformNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MaintenanceNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MaintenanceNodeEdge]!
}

"""A Relay edge containing a `MaintenanceNode` and its cursor."""
type MaintenanceNodeEdge {
  """The item at the end of the edge"""
  node: MaintenanceNode

  """A cursor for use in pagination"""
  cursor: String!
}

type MaintenanceNode implements Node {
  id: ID!
  type: MaintenanceTypeNode!
  date: Date!
  description: String
  maintainer: ContactNode
  maintainerInstitution: InstitutionNode
  platform: PlatformNode
  equipment: EquipmentNode
}

type MaintenanceTypeNode implements Node {
  id: ID!
  name: String!
  description: String
  interval: Float
  maintenances(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], typeId: ID, typeId_In: [ID], maintainerId: ID, maintainerId_In: [ID], maintainerInstitutionId: ID, maintainerInstitutionId_In: [ID], platformId: ID, platformId_In: [ID], equipmentId: ID, equipmentId_In: [ID], date: Date, date_Lt: Date, date_Lte: Date, date_Gt: Date, date_Gte: Date): MaintenanceNodeConnection!
}

type EquipmentNode implements Node {
  id: ID!
  model: String!
  serialNumber: String!
  owner: InstitutionNode!
  provider: InstitutionNode!
  storageSpecification: StorageSpecificationNode
  recorderSpecification: RecorderSpecificationNode
  hydrophoneSpecification: HydrophoneSpecificationNode
  acousticDetectorSpecification: AcousticDetectorSpecificationNode
  purchaseDate: Date
  name: String
  batterySlotsCount: Int
  batteryType: String
  cables: String
  maintenances(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], typeId: ID, typeId_In: [ID], maintainerId: ID, maintainerId_In: [ID], maintainerInstitutionId: ID, maintainerInstitutionId_In: [ID], platformId: ID, platformId_In: [ID], equipmentId: ID, equipmentId_In: [ID], date: Date, date_Lt: Date, date_Lte: Date, date_Gt: Date, date_Gte: Date): MaintenanceNodeConnection!
  channelConfigurationDetectorSpecifications(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], detectorId: ID, detectorId_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], channelConfiguration_Id: Decimal, channelConfiguration_Id_In: [ID], outputFormats: String): ChannelConfigurationDetectorSpecificationNodeConnection!
  channelConfigurationRecorderSpecifications(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], hydrophoneId: ID, hydrophoneId_In: [ID], recorderId: ID, recorderId_In: [ID], channelConfiguration_Id: Decimal, channelConfiguration_Id_In: [ID], recordingFormats: String): ChannelConfigurationRecorderSpecificationNodeConnection!
  channelConfigurationHydrophoneSpecifications(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], hydrophoneId: ID, hydrophoneId_In: [ID], recorderId: ID, recorderId_In: [ID], channelConfiguration_Id: Decimal, channelConfiguration_Id_In: [ID], recordingFormats: String): ChannelConfigurationRecorderSpecificationNodeConnection!
  channelConfigurations(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], recorderSpecification_Isnull: Boolean, detectorSpecification_Isnull: Boolean, deploymentId: ID, deploymentId_In: [ID], continuous: Boolean, dutyCycleOn: Int, dutyCycleOn_Lt: Int, dutyCycleOn_Lte: Int, dutyCycleOn_Gt: Int, dutyCycleOn_Gte: Int, dutyCycleOff: Int, dutyCycleOff_Lt: Int, dutyCycleOff_Lte: Int, dutyCycleOff_Gt: Int, dutyCycleOff_Gte: Int, instrumentDepth: Int, instrumentDepth_Lt: Int, instrumentDepth_Lte: Int, instrumentDepth_Gt: Int, instrumentDepth_Gte: Int, timezone: String, harvestStartingDate: DateTime, harvestStartingDate_Lt: DateTime, harvestStartingDate_Lte: DateTime, harvestStartingDate_Gt: DateTime, harvestStartingDate_Gte: DateTime, harvestEndingDate: DateTime, harvestEndingDate_Lt: DateTime, harvestEndingDate_Lte: DateTime, harvestEndingDate_Gt: DateTime, harvestEndingDate_Gte: DateTime, files_Id: Decimal, files_Id_In: [ID], storages_Id: Decimal, storages_Id_In: [ID]): ChannelConfigurationNodeConnection!
}

type StorageSpecificationNode implements Node {
  id: ID!
  capacity: [String!]!
  type: String
  equipmentSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!
}

type EquipmentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [EquipmentNodeEdge]!
}

"""A Relay edge containing a `EquipmentNode` and its cursor."""
type EquipmentNodeEdge {
  """The item at the end of the edge"""
  node: EquipmentNode

  """A cursor for use in pagination"""
  cursor: String!
}

type RecorderSpecificationNode implements Node {
  id: ID!

  """Number of all the channels on the recorder, even if unused."""
  channelsCount: Int
  storageSlotsCount: Int
  storageMaximumCapacity: [String!]
  storageType: String
  equipmentSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!
}

type HydrophoneSpecificationNode implements Node {
  id: ID!
  sensitivity: Float!
  directivity: HydrophoneDirectivityEnum

  """Minimal temperature where the hydrophone operates (in degree Celsius)"""
  operatingMinTemperature: Float

  """Maximal temperature where the hydrophone operates (in degree Celsius)"""
  operatingMaxTemperature: Float

  """
  Lower limiting frequency for a more or less flat response of the hydrophone, pre-amplification included if applicable.
  """
  minBandwidth: Float

  """
  Upper limiting frequency within a more or less flat response of the hydrophone, pre-amplification included if applicable.
  """
  maxBandwidth: Float

  """
  Lowest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.
  """
  minDynamicRange: Float

  """
  Highest level which the hydrophone can handle (dB SPL RMS or peak), pre-amplification included if applicable.
  """
  maxDynamicRange: Float

  """Minimum depth at which hydrophone operates (in positive meters)."""
  minOperatingDepth: Float

  """Maximum depth at which hydrophone operates (in positive meters)."""
  maxOperatingDepth: Float

  """
  Self noise of the hydrophone (dB re 1µPa^2/Hz), pre-amplification included if applicable.<br>Average on bandwidth or a fix frequency (generally @5kHz for example). Possibility to 'below sea-state zero' (equivalent to around 30dB @5kHz) could be nice because it is often described like that.
  """
  noiseFloor: Float
  equipmentSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!
}

scalar HydrophoneDirectivityEnum

type AcousticDetectorSpecificationNode implements Node {
  id: ID!
  detectedLabels(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], sourceId: ID, sourceId_In: [ID], soundId: ID, soundId_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], nickname: String, nickname_Icontains: String, acousticDetectors_Id: Decimal, acousticDetectors_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], shape: SignalShapeEnum, plurality: SignalPluralityEnum, minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, meanDuration: Float, meanDuration_Lt: Float, meanDuration_Lte: Float, meanDuration_Gt: Float, meanDuration_Gte: Float, labels_Id: Decimal): LabelNodeConnection!
  minFrequency: Int
  maxFrequency: Int
  algorithmName: String
  equipmentSet(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!
  detectorSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, specification: ID): DetectorNodeConnection!
}

type LabelNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LabelNodeEdge]!
}

"""A Relay edge containing a `LabelNode` and its cursor."""
type LabelNodeEdge {
  """The item at the end of the edge"""
  node: LabelNode

  """A cursor for use in pagination"""
  cursor: String!
}

scalar SignalShapeEnum

scalar SignalPluralityEnum

type DetectorNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DetectorNodeEdge]!
}

"""A Relay edge containing a `DetectorNode` and its cursor."""
type DetectorNodeEdge {
  """The item at the end of the edge"""
  node: DetectorNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Detector schema"""
type DetectorNode implements Node {
  id: ID!
  name: String!
  specification: AcousticDetectorSpecificationNode
  configurations(offset: Int, before: String, after: String, first: Int, last: Int, configuration: String, detector: ID): DetectorConfigurationNodeConnection!
}

type DetectorConfigurationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DetectorConfigurationNodeEdge]!
}

"""A Relay edge containing a `DetectorConfigurationNode` and its cursor."""
type DetectorConfigurationNodeEdge {
  """The item at the end of the edge"""
  node: DetectorConfigurationNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""DetectorConfiguration schema"""
type DetectorConfigurationNode implements Node {
  id: ID!
  configuration: String
  detector: DetectorNode!
  annotations(offset: Int, before: String, after: String, first: Int, last: Int, type: ApiAnnotationTypeChoices, startTime: Float, endTime: Float, startFrequency: Float, endFrequency: Float, label: ID, confidence: ID, annotationPhase: ID, annotator: ID, annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices, spectrogram: ID, detectorConfiguration: ID, acousticFeatures: ID, isUpdateOf: ID, createdAt: DateTime, lastUpdatedAt: DateTime): AnnotationNodeConnection!
}

type AnnotationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationNodeEdge]!
}

"""A Relay edge containing a `AnnotationNode` and its cursor."""
type AnnotationNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Annotation schema"""
type AnnotationNode implements Node {
  id: ID!

  """Type of the annotation"""
  type: ApiAnnotationTypeChoices!
  startTime: Float
  endTime: Float
  startFrequency: Float
  endFrequency: Float
  label: LabelNode!
  confidence: ConfidenceNode
  annotationPhase: AnnotationPhaseNode!

  """Expertise level of the annotator."""
  annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices
  spectrogram: SpectrogramNode
  detectorConfiguration: DetectorConfigurationNode

  """Acoustic features add a better description to the signal"""
  acousticFeatures: AcousticFeaturesNode
  isUpdateOf: AnnotationNode
  createdAt: DateTime!
  lastUpdatedAt: DateTime!
  updatedTo(offset: Int, before: String, after: String, first: Int, last: Int, type: ApiAnnotationTypeChoices, startTime: Float, endTime: Float, startFrequency: Float, endFrequency: Float, label: ID, confidence: ID, annotationPhase: ID, annotator: ID, annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices, spectrogram: ID, detectorConfiguration: ID, acousticFeatures: ID, isUpdateOf: ID, createdAt: DateTime, lastUpdatedAt: DateTime): AnnotationNodeConnection!
  annotationComments(offset: Int, before: String, after: String, first: Int, last: Int, comment: String, annotation: ID, annotationPhase: ID, author: ID, spectrogram: ID): AnnotationCommentNodeConnection!
  validations(offset: Int, before: String, after: String, first: Int, last: Int, annotation: ID, annotator: ID, isValid: Boolean, createdAt: DateTime, lastUpdatedAt: DateTime): AnnotationValidationNodeConnection!
}

"""An enumeration."""
enum ApiAnnotationTypeChoices {
  """Weak"""
  W

  """Point"""
  P

  """Box"""
  B
}

"""Confidence schema"""
type ConfidenceNode implements Node {
  id: ID!
  label: String!
  level: Int!
  confidenceIndicatorSets(offset: Int, before: String, after: String, first: Int, last: Int, name: String, desc: String, confidenceIndicators: ID): ConfidenceSetNodeConnection!
  annotationSet(offset: Int, before: String, after: String, first: Int, last: Int, type: ApiAnnotationTypeChoices, startTime: Float, endTime: Float, startFrequency: Float, endFrequency: Float, label: ID, confidence: ID, annotationPhase: ID, annotator: ID, annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices, spectrogram: ID, detectorConfiguration: ID, acousticFeatures: ID, isUpdateOf: ID, createdAt: DateTime, lastUpdatedAt: DateTime): AnnotationNodeConnection!
}

type ConfidenceSetNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ConfidenceSetNodeEdge]!
}

"""A Relay edge containing a `ConfidenceSetNode` and its cursor."""
type ConfidenceSetNodeEdge {
  """The item at the end of the edge"""
  node: ConfidenceSetNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""ConfidenceSet schema"""
type ConfidenceSetNode implements Node {
  id: ID!
  name: String!
  desc: String
  confidenceIndicators(offset: Int, before: String, after: String, first: Int, last: Int, label: String, level: Int): ConfidenceNodeConnection!
  annotationcampaignSet(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, instructionsUrl: String, deadline: Date, labelSet: ID, labelsWithAcousticFeatures: ID, allowPointAnnotation: Boolean, dataset: ID, analysis: ID, allowImageTuning: Boolean, allowColormapTuning: Boolean, colormapDefault: String, colormapInvertedDefault: Boolean, owner: ID, confidenceSet: ID, archive: ID): AnnotationCampaignNodeConnection!
}

type ConfidenceNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ConfidenceNodeEdge]!
}

"""A Relay edge containing a `ConfidenceNode` and its cursor."""
type ConfidenceNodeEdge {
  """The item at the end of the edge"""
  node: ConfidenceNode

  """A cursor for use in pagination"""
  cursor: String!
}

type AnnotationCampaignNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationCampaignNodeEdge]!
}

"""A Relay edge containing a `AnnotationCampaignNode` and its cursor."""
type AnnotationCampaignNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationCampaignNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""AnnotationCampaign schema"""
type AnnotationCampaignNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String
  instructionsUrl: String
  deadline: Date
  labelSet: LabelSetNode
  labelsWithAcousticFeatures(offset: Int, before: String, after: String, first: Int, last: Int, name: String, metadataxLabel: ID): LabelNodeConnection!
  allowPointAnnotation: Boolean!
  dataset: DatasetNode!
  analysis(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, path: String, legacy: Boolean, startDate: Date, endDate: Date, owner: ID, dataset: ID, dataDuration: Float, fft: ID, colormap: ID, legacyConfiguration: ID, dynamicMin: Float, dynamicMax: Float): SpectrogramAnalysisNodeConnection!
  allowImageTuning: Boolean!
  allowColormapTuning: Boolean!
  colormapDefault: String
  colormapInvertedDefault: Boolean
  confidenceSet: ConfidenceSetNode
  archive: ArchiveNode
  phases(offset: Int, before: String, after: String, first: Int, last: Int, phase: ApiAnnotationPhasePhaseChoices, annotationCampaign: ID, createdAt: DateTime, createdBy: ID, endedAt: DateTime, endedBy: ID): AnnotationPhaseNodeConnection!
}

"""LabelSet schema"""
type LabelSetNode implements Node {
  id: ID!
  name: String!
  description: String
  labels(offset: Int, before: String, after: String, first: Int, last: Int, name: String, metadataxLabel: ID): LabelNodeConnection!
  annotationcampaignSet(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, instructionsUrl: String, deadline: Date, labelSet: ID, labelsWithAcousticFeatures: ID, allowPointAnnotation: Boolean, dataset: ID, analysis: ID, allowImageTuning: Boolean, allowColormapTuning: Boolean, colormapDefault: String, colormapInvertedDefault: Boolean, owner: ID, confidenceSet: ID, archive: ID): AnnotationCampaignNodeConnection!
}

"""Dataset schema"""
type DatasetNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String
  path: String!
  legacy: Boolean!
  relatedChannelConfigurations(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], recorderSpecification_Isnull: Boolean, detectorSpecification_Isnull: Boolean, deploymentId: ID, deploymentId_In: [ID], continuous: Boolean, dutyCycleOn: Int, dutyCycleOn_Lt: Int, dutyCycleOn_Lte: Int, dutyCycleOn_Gt: Int, dutyCycleOn_Gte: Int, dutyCycleOff: Int, dutyCycleOff_Lt: Int, dutyCycleOff_Lte: Int, dutyCycleOff_Gt: Int, dutyCycleOff_Gte: Int, instrumentDepth: Int, instrumentDepth_Lt: Int, instrumentDepth_Lte: Int, instrumentDepth_Gt: Int, instrumentDepth_Gte: Int, timezone: String, harvestStartingDate: DateTime, harvestStartingDate_Lt: DateTime, harvestStartingDate_Lte: DateTime, harvestStartingDate_Gt: DateTime, harvestStartingDate_Gte: DateTime, harvestEndingDate: DateTime, harvestEndingDate_Lt: DateTime, harvestEndingDate_Lte: DateTime, harvestEndingDate_Gt: DateTime, harvestEndingDate_Gte: DateTime, files_Id: Decimal, files_Id_In: [ID], storages_Id: Decimal, storages_Id_In: [ID]): ChannelConfigurationNodeConnection!
  spectrogramAnalysis(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    createdAt: DateTime
    name: String
    description: String
    path: String
    legacy: Boolean
    startDate: Date
    endDate: Date
    owner: ID
    dataset: ID
    dataDuration: Float
    fft: ID
    colormap: ID
    legacyConfiguration: ID
    dynamicMin: Float
    dynamicMax: Float
  ): SpectrogramAnalysisNodeNodeConnection
  annotationCampaigns(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, instructionsUrl: String, deadline: Date, labelSet: ID, labelsWithAcousticFeatures: ID, allowPointAnnotation: Boolean, dataset: ID, analysis: ID, allowImageTuning: Boolean, allowColormapTuning: Boolean, colormapDefault: String, colormapInvertedDefault: Boolean, owner: ID, confidenceSet: ID, archive: ID): AnnotationCampaignNodeConnection!
  analysisCount: Int
  filesCount: Int
  start: Date
  end: Date
}

type ChannelConfigurationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ChannelConfigurationNodeEdge]!
}

"""A Relay edge containing a `ChannelConfigurationNode` and its cursor."""
type ChannelConfigurationNodeEdge {
  """The item at the end of the edge"""
  node: ChannelConfigurationNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ChannelConfigurationNode implements Node {
  id: ID!
  deployment: DeploymentNode!

  """Each specification is dedicated to one file."""
  recorderSpecification: ChannelConfigurationRecorderSpecificationNode

  """Each specification is dedicated to one file."""
  detectorSpecification: ChannelConfigurationDetectorSpecificationNode
  storages(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], model: String, model_Icontains: String, serialNumber: String, serialNumber_Icontains: String, ownerId: ID, ownerId_In: [ID], providerId: ID, providerId_In: [ID], storageSpecification_Isnull: Boolean, recorderSpecification_Isnull: Boolean, hydrophoneSpecification_Isnull: Boolean, acousticDetectorSpecification_Isnull: Boolean, purchaseDate: Date, purchaseDate_Lt: Date, purchaseDate_Lte: Date, purchaseDate_Gt: Date, purchaseDate_Gte: Date, name: String, name_Icontains: String, batterySlotsCount: Int, batterySlotsCount_Lt: Int, batterySlotsCount_Lte: Int, batterySlotsCount_Gt: Int, batterySlotsCount_Gte: Int, batteryType: String, batteryType_Icontains: String, cables: String, cables_Icontains: String, channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], channelConfigurationHydrophoneSpecifications_Id: Decimal, channelConfigurationHydrophoneSpecifications_Id_In: [ID], channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], maintenances_Id: Decimal, maintenances_Id_In: [ID]): EquipmentNodeConnection!

  """
  Boolean indicating if the record is continuous (1) or has a duty cycle (0).
  """
  continuous: Boolean

  """
  If it's not Continuous, time length (in second) during which the recorder is on.
  """
  dutyCycleOn: Int

  """
  If it's not Continuous, time length (in second) during which the recorder is off.
  """
  dutyCycleOff: Int

  """Immersion depth of instrument (in positive meters)."""
  instrumentDepth: Int
  timezone: String
  extraInformation: String

  """
  Harvest start date at which the channel configuration was idle to record (in UTC).
  """
  harvestStartingDate: DateTime

  """
  Harvest stop date at which the channel configuration finished to record in (in UTC).
  """
  harvestEndingDate: DateTime
  files(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], filename: String, filename_Icontains: String, format: String, audioPropertiesId: ID, audioPropertiesId_In: [ID], detectionPropertiesId: ID, detectionPropertiesId_In: [ID], storageLocation: String, storageLocation_Icontains: String, fileSize: BigInt, fileSize_Lt: BigInt, fileSize_Lte: BigInt, fileSize_Gt: BigInt, fileSize_Gte: BigInt, accessibility: AccessibilityEnum, channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID]): FileNodeConnection!
  datasets(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
    createdAt: DateTime
    name: String
    description: String
    path: String
    owner: ID
    legacy: Boolean
    relatedChannelConfigurations: ID

    """Ordering"""
    orderBy: String
  ): DatasetNodeConnection!
}

type ChannelConfigurationRecorderSpecificationNode implements Node {
  id: ID!
  recorder: EquipmentNode!
  hydrophone: EquipmentNode!
  recordingFormats(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], files_Id: Decimal, files_Id_In: [ID]): FileFormatNodeConnection!

  """Sampling frequency of the recording channel (in Hertz)."""
  samplingFrequency: Int!

  """
  Number of quantization bits used to represent each sample by the recorder channel (in bits).
  """
  sampleDepth: Int!

  """
  Gain of the channel (recorder), with correction factors if applicable, without hydrophone sensibility (in dB). If end-to-end calibration with hydrophone sensibility, set it in Sensitivity and set Gain to 0 dB.<br>Gain G of the channel such that : data(uPa) = data(volt)*10^((-Sh-G)/20). See Sensitivity for Sh definition.
  """
  gain: Float!

  """Name of the channel used for recording."""
  channelName: String
  channelConfiguration: ChannelConfigurationNode
}

type FileFormatNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [FileFormatNodeEdge]!
}

"""A Relay edge containing a `FileFormatNode` and its cursor."""
type FileFormatNodeEdge {
  """The item at the end of the edge"""
  node: FileFormatNode

  """A cursor for use in pagination"""
  cursor: String!
}

type FileFormatNode implements Node {
  id: ID!

  """Format of the file"""
  name: String!

  """Format of the audio file."""
  files(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], filename: String, filename_Icontains: String, format: String, audioPropertiesId: ID, audioPropertiesId_In: [ID], detectionPropertiesId: ID, detectionPropertiesId_In: [ID], storageLocation: String, storageLocation_Icontains: String, fileSize: BigInt, fileSize_Lt: BigInt, fileSize_Lte: BigInt, fileSize_Gt: BigInt, fileSize_Gte: BigInt, accessibility: AccessibilityEnum, channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID]): FileNodeConnection!
  channelConfigurationDetectorSpecifications(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], detectorId: ID, detectorId_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], channelConfiguration_Id: Decimal, channelConfiguration_Id_In: [ID], outputFormats: String): ChannelConfigurationDetectorSpecificationNodeConnection!
  channelConfigurationRecorderSpecifications(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], hydrophoneId: ID, hydrophoneId_In: [ID], recorderId: ID, recorderId_In: [ID], channelConfiguration_Id: Decimal, channelConfiguration_Id_In: [ID], recordingFormats: String): ChannelConfigurationRecorderSpecificationNodeConnection!
  spectrogramSet(offset: Int, before: String, after: String, first: Int, last: Int, format: ID, filename: String, start: DateTime, end: DateTime, analysis: ID): SpectrogramNodeConnection!
}

type FileNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [FileNodeEdge]!
}

"""A Relay edge containing a `FileNode` and its cursor."""
type FileNodeEdge {
  """The item at the end of the edge"""
  node: FileNode

  """A cursor for use in pagination"""
  cursor: String!
}

type FileNode implements Node {
  id: ID!

  """Name of the file, with extension."""
  filename: String!

  """Format of the audio file."""
  format: FileFormatNode!

  """Each property is dedicated to one file."""
  audioProperties: AudioPropertiesNode

  """Each property is dedicated to one file."""
  detectionProperties: DetectionPropertiesNode

  """Description of the path to access the data."""
  storageLocation: String

  """Total number of bytes of the audio file (in bytes)."""
  fileSize: BigInt
  accessibility: AccessibilityEnum
  channelConfigurations(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], recorderSpecification_Isnull: Boolean, detectorSpecification_Isnull: Boolean, deploymentId: ID, deploymentId_In: [ID], continuous: Boolean, dutyCycleOn: Int, dutyCycleOn_Lt: Int, dutyCycleOn_Lte: Int, dutyCycleOn_Gt: Int, dutyCycleOn_Gte: Int, dutyCycleOff: Int, dutyCycleOff_Lt: Int, dutyCycleOff_Lte: Int, dutyCycleOff_Gt: Int, dutyCycleOff_Gte: Int, instrumentDepth: Int, instrumentDepth_Lt: Int, instrumentDepth_Lte: Int, instrumentDepth_Gt: Int, instrumentDepth_Gte: Int, timezone: String, harvestStartingDate: DateTime, harvestStartingDate_Lt: DateTime, harvestStartingDate_Lte: DateTime, harvestStartingDate_Gt: DateTime, harvestStartingDate_Gte: DateTime, harvestEndingDate: DateTime, harvestEndingDate_Lt: DateTime, harvestEndingDate_Lte: DateTime, harvestEndingDate_Gt: DateTime, harvestEndingDate_Gte: DateTime, files_Id: Decimal, files_Id_In: [ID], storages_Id: Decimal, storages_Id_In: [ID]): ChannelConfigurationNodeConnection!
}

type AudioPropertiesNode implements Node {
  id: ID!

  """
  Sampling frequency of the audio file (in Hertz). If it is different from the channel sampling frequency, resampling has been performed.
  """
  samplingFrequency: Int!

  """Date and time of the audio file start (in UTC)."""
  initialTimestamp: DateTime!

  """Duration of the audio file (in seconds)."""
  duration: Int!

  """
  Number of quantization bits used to represent each sample (in bits). If it is different from the channel sampling frequency, re-quantization has been performed.
  """
  sampleDepth: Int
  file: FileNode
}

type DetectionPropertiesNode implements Node {
  id: ID!

  """Start of the detection file covering (in UTC)."""
  start: DateTime!

  """End of the detection file covering (in UTC)."""
  end: DateTime!
  file: FileNode
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

type ChannelConfigurationDetectorSpecificationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ChannelConfigurationDetectorSpecificationNodeEdge]!
}

"""
A Relay edge containing a `ChannelConfigurationDetectorSpecificationNode` and its cursor.
"""
type ChannelConfigurationDetectorSpecificationNodeEdge {
  """The item at the end of the edge"""
  node: ChannelConfigurationDetectorSpecificationNode

  """A cursor for use in pagination"""
  cursor: String!
}

type ChannelConfigurationDetectorSpecificationNode implements Node {
  id: ID!
  detector: EquipmentNode!
  outputFormats(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, channelConfigurationRecorderSpecifications_Id: Decimal, channelConfigurationRecorderSpecifications_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], files_Id: Decimal, files_Id_In: [ID]): FileFormatNodeConnection!
  labels(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], sourceId: ID, sourceId_In: [ID], soundId: ID, soundId_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], nickname: String, nickname_Icontains: String, acousticDetectors_Id: Decimal, acousticDetectors_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], shape: SignalShapeEnum, plurality: SignalPluralityEnum, minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, meanDuration: Float, meanDuration_Lt: Float, meanDuration_Lte: Float, meanDuration_Gt: Float, meanDuration_Gte: Float, labels_Id: Decimal): LabelNodeConnection!

  """Minimum frequency (in Hertz)."""
  minFrequency: Int

  """Maximum frequency (in Hertz)."""
  maxFrequency: Int
  filter: String
  configuration: String
  channelConfiguration: ChannelConfigurationNode
}

type ChannelConfigurationRecorderSpecificationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ChannelConfigurationRecorderSpecificationNodeEdge]!
}

"""
A Relay edge containing a `ChannelConfigurationRecorderSpecificationNode` and its cursor.
"""
type ChannelConfigurationRecorderSpecificationNodeEdge {
  """The item at the end of the edge"""
  node: ChannelConfigurationRecorderSpecificationNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SpectrogramNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SpectrogramNodeEdge]!
}

"""A Relay edge containing a `SpectrogramNode` and its cursor."""
type SpectrogramNodeEdge {
  """The item at the end of the edge"""
  node: SpectrogramNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Spectrogram schema"""
type SpectrogramNode implements Node {
  id: ID!
  format: FileFormatNode!
  filename: String!
  start: DateTime!
  end: DateTime!
  analysis(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, path: String, legacy: Boolean, startDate: Date, endDate: Date, owner: ID, dataset: ID, dataDuration: Float, fft: ID, colormap: ID, legacyConfiguration: ID, dynamicMin: Float, dynamicMax: Float): SpectrogramAnalysisNodeConnection!
  annotations(offset: Int, before: String, after: String, first: Int, last: Int, type: ApiAnnotationTypeChoices, startTime: Float, endTime: Float, startFrequency: Float, endFrequency: Float, label: ID, confidence: ID, annotationPhase: ID, annotator: ID, annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices, spectrogram: ID, detectorConfiguration: ID, acousticFeatures: ID, isUpdateOf: ID, createdAt: DateTime, lastUpdatedAt: DateTime): AnnotationNodeConnection!
  annotationComments(offset: Int, before: String, after: String, first: Int, last: Int, comment: String, annotation: ID, annotationPhase: ID, author: ID, spectrogram: ID): AnnotationCommentNodeConnection!
  annotationTasks(offset: Int, before: String, after: String, first: Int, last: Int, status: ApiAnnotationTaskStatusChoices, annotationPhase: ID, annotator: ID, spectrogram: ID, sessions: [ID]): AnnotationTaskNodeConnection!
}

type SpectrogramAnalysisNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SpectrogramAnalysisNodeEdge]!
}

"""A Relay edge containing a `SpectrogramAnalysisNode` and its cursor."""
type SpectrogramAnalysisNodeEdge {
  """The item at the end of the edge"""
  node: SpectrogramAnalysisNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""SpectrogramAnalysis schema"""
type SpectrogramAnalysisNode implements Node {
  id: ID!
  createdAt: DateTime!
  name: String!
  description: String
  path: String!
  legacy: Boolean!
  startDate: Date
  endDate: Date
  dataset: DatasetNode!

  """Duration of the segmented data (in s)"""
  dataDuration: Float
  fft: FFTNode!
  colormap: ColormapNode!
  legacyConfiguration: LegacySpectrogramConfigurationNode
  dynamicMin: Float!
  dynamicMax: Float!
  spectrograms(
    """Query limit"""
    limit: Int

    """Query offset"""
    offset: Int

    """Query order"""
    ordering: String
    before: String
    after: String
    first: Int
    last: Int
    format: ID
    filename: String
    start: DateTime
    end: DateTime
    analysis: ID
  ): SpectrogramNodeNodeConnection
  annotationCampaigns(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, instructionsUrl: String, deadline: Date, labelSet: ID, labelsWithAcousticFeatures: ID, allowPointAnnotation: Boolean, dataset: ID, analysis: ID, allowImageTuning: Boolean, allowColormapTuning: Boolean, colormapDefault: String, colormapInvertedDefault: Boolean, owner: ID, confidenceSet: ID, archive: ID): AnnotationCampaignNodeConnection!
  filesCount: Int
}

"""FFT schema"""
type FFTNode implements Node {
  id: ID!
  nfft: Int!
  window: String
  windowSize: Int!
  overlap: Decimal!
  samplingFrequency: Int!
  scaling: String
  legacy: Boolean!
  spectrogramAnalysis(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, path: String, legacy: Boolean, startDate: Date, endDate: Date, owner: ID, dataset: ID, dataDuration: Float, fft: ID, colormap: ID, legacyConfiguration: ID, dynamicMin: Float, dynamicMax: Float): SpectrogramAnalysisNodeConnection!
}

"""Colormap schema"""
type ColormapNode implements Node {
  id: ID!
  name: String!
  spectrogramAnalysis(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, path: String, legacy: Boolean, startDate: Date, endDate: Date, owner: ID, dataset: ID, dataDuration: Float, fft: ID, colormap: ID, legacyConfiguration: ID, dynamicMin: Float, dynamicMax: Float): SpectrogramAnalysisNodeConnection!
}

"""LegacySpectrogramConfiguration schema"""
type LegacySpectrogramConfigurationNode implements Node {
  id: ID!
  folder: String!
  zoomLevel: Int!
  hpFilterMinFrequency: Int!
  dataNormalization: String!
  frequencyResolution: Float!
  spectrogramNormalization: String!
  zscoreDuration: String
  windowType: String
  peakVoltage: Float
  sensitivityDb: Float
  temporalResolution: Float
  linearFrequencyScale: LinearScaleNode
  multiLinearFrequencyScale: MultiLinearScaleNode
  spectrogramAnalysis(offset: Int, before: String, after: String, first: Int, last: Int, createdAt: DateTime, name: String, description: String, path: String, legacy: Boolean, startDate: Date, endDate: Date, owner: ID, dataset: ID, dataDuration: Float, fft: ID, colormap: ID, legacyConfiguration: ID, dynamicMin: Float, dynamicMax: Float): SpectrogramAnalysisNodeConnection!
}

"""LinearScale schema"""
type LinearScaleNode implements Node {
  id: ID!
  name: String
  ratio: Float!
  minValue: Float!
  maxValue: Float!
  outerScales(offset: Int, before: String, after: String, first: Int, last: Int, name: String, innerScales: ID): MultiLinearScaleNodeConnection!
  legacyspectrogramconfigurationSet(offset: Int, before: String, after: String, first: Int, last: Int, folder: String, zoomLevel: Int, hpFilterMinFrequency: Int, dataNormalization: String, frequencyResolution: Float, spectrogramNormalization: String, zscoreDuration: String, windowType: String, peakVoltage: Float, sensitivityDb: Float, temporalResolution: Float, linearFrequencyScale: ID, multiLinearFrequencyScale: ID): LegacySpectrogramConfigurationNodeConnection!
}

type MultiLinearScaleNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MultiLinearScaleNodeEdge]!
}

"""A Relay edge containing a `MultiLinearScaleNode` and its cursor."""
type MultiLinearScaleNodeEdge {
  """The item at the end of the edge"""
  node: MultiLinearScaleNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""MultiLinearScale schema"""
type MultiLinearScaleNode implements Node {
  id: ID!
  name: String
  innerScales(offset: Int, before: String, after: String, first: Int, last: Int, name: String, ratio: Float, minValue: Float, maxValue: Float): LinearScaleNodeConnection!
  legacyspectrogramconfigurationSet(offset: Int, before: String, after: String, first: Int, last: Int, folder: String, zoomLevel: Int, hpFilterMinFrequency: Int, dataNormalization: String, frequencyResolution: Float, spectrogramNormalization: String, zscoreDuration: String, windowType: String, peakVoltage: Float, sensitivityDb: Float, temporalResolution: Float, linearFrequencyScale: ID, multiLinearFrequencyScale: ID): LegacySpectrogramConfigurationNodeConnection!
}

type LinearScaleNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LinearScaleNodeEdge]!
}

"""A Relay edge containing a `LinearScaleNode` and its cursor."""
type LinearScaleNodeEdge {
  """The item at the end of the edge"""
  node: LinearScaleNode

  """A cursor for use in pagination"""
  cursor: String!
}

type LegacySpectrogramConfigurationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LegacySpectrogramConfigurationNodeEdge]!
}

"""
A Relay edge containing a `LegacySpectrogramConfigurationNode` and its cursor.
"""
type LegacySpectrogramConfigurationNodeEdge {
  """The item at the end of the edge"""
  node: LegacySpectrogramConfigurationNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SpectrogramNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [SpectrogramNode]!
  totalCount: Int
}

"""An enumeration."""
enum ApiAnnotationAnnotatorExpertiseLevelChoices {
  """Expert"""
  E

  """Average"""
  A

  """Novice"""
  N
}

type AnnotationCommentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationCommentNodeEdge]!
}

"""A Relay edge containing a `AnnotationCommentNode` and its cursor."""
type AnnotationCommentNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationCommentNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""AnnotationComment schema"""
type AnnotationCommentNode implements Node {
  id: ID!
  comment: String!
  annotation: AnnotationNode
  annotationPhase: AnnotationPhaseNode!
  spectrogram: SpectrogramNode!
}

"""AnnotationPhase schema"""
type AnnotationPhaseNode implements Node {
  id: ID!
  phase: ApiAnnotationPhasePhaseChoices!
  annotationCampaign: AnnotationCampaignNode!
  createdAt: DateTime!
  endedAt: DateTime
  results(offset: Int, before: String, after: String, first: Int, last: Int, type: ApiAnnotationTypeChoices, startTime: Float, endTime: Float, startFrequency: Float, endFrequency: Float, label: ID, confidence: ID, annotationPhase: ID, annotator: ID, annotatorExpertiseLevel: ApiAnnotationAnnotatorExpertiseLevelChoices, spectrogram: ID, detectorConfiguration: ID, acousticFeatures: ID, isUpdateOf: ID, createdAt: DateTime, lastUpdatedAt: DateTime): AnnotationNodeConnection!
  annotationComments(offset: Int, before: String, after: String, first: Int, last: Int, comment: String, annotation: ID, annotationPhase: ID, author: ID, spectrogram: ID): AnnotationCommentNodeConnection!
  annotationTasks(offset: Int, before: String, after: String, first: Int, last: Int, status: ApiAnnotationTaskStatusChoices, annotationPhase: ID, annotator: ID, spectrogram: ID, sessions: [ID]): AnnotationTaskNodeConnection!
  annotationFileRanges(offset: Int, before: String, after: String, first: Int, last: Int, firstFileIndex: Int, lastFileIndex: Int, fromDatetime: DateTime, toDatetime: DateTime, filesCount: Int, annotator: ID, annotationPhase: ID): AnnotationFileRangeNodeConnection!
}

"""An enumeration."""
enum ApiAnnotationPhasePhaseChoices {
  """Annotation"""
  A

  """Verification"""
  V
}

type AnnotationTaskNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationTaskNodeEdge]!
}

"""A Relay edge containing a `AnnotationTaskNode` and its cursor."""
type AnnotationTaskNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationTaskNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""AnnotationTask schema"""
type AnnotationTaskNode implements Node {
  id: ID!
  status: ApiAnnotationTaskStatusChoices!
  annotationPhase: AnnotationPhaseNode!
  spectrogram: SpectrogramNode!
}

"""An enumeration."""
enum ApiAnnotationTaskStatusChoices {
  """Created"""
  C

  """Finished"""
  F
}

type AnnotationFileRangeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationFileRangeNodeEdge]!
}

"""A Relay edge containing a `AnnotationFileRangeNode` and its cursor."""
type AnnotationFileRangeNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationFileRangeNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""AnnotationFileRange schema"""
type AnnotationFileRangeNode implements Node {
  id: ID!
  firstFileIndex: Int!
  lastFileIndex: Int!
  fromDatetime: DateTime!
  toDatetime: DateTime!
  filesCount: Int!
  annotationPhase: AnnotationPhaseNode!
}

type DatasetNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DatasetNodeEdge]!
}

"""A Relay edge containing a `DatasetNode` and its cursor."""
type DatasetNodeEdge {
  """The item at the end of the edge"""
  node: DatasetNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SpectrogramAnalysisNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [SpectrogramAnalysisNode]!
  totalCount: Int
}

"""Archive schema"""
type ArchiveNode implements Node {
  id: ID!
  date: DateTime!
  annotationCampaign: AnnotationCampaignNode
}

type AnnotationPhaseNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationPhaseNodeEdge]!
}

"""A Relay edge containing a `AnnotationPhaseNode` and its cursor."""
type AnnotationPhaseNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationPhaseNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""AcousticFeatures schema"""
type AcousticFeaturesNode implements Node {
  id: ID!

  """[Hz] Frequency at the beginning of the signal"""
  startFrequency: Float

  """[Hz] Frequency at the end of the signal"""
  endFrequency: Float

  """Number of relative maximum frequency in the signal"""
  relativeMaxFrequencyCount: Int

  """Number of relative minimum frequency in the signal"""
  relativeMinFrequencyCount: Int

  """If the signal has harmonics"""
  hasHarmonics: Boolean
  trend: ApiAcousticFeaturesTrendChoices

  """Number of steps (flat segment) in the signal"""
  stepsCount: Int
  annotation: AnnotationNode
}

"""An enumeration."""
enum ApiAcousticFeaturesTrendChoices {
  """Flat"""
  FLAT

  """Ascending"""
  ASC

  """Descending"""
  DESC

  """Modulated"""
  MOD
}

type AnnotationValidationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnotationValidationNodeEdge]!
}

"""A Relay edge containing a `AnnotationValidationNode` and its cursor."""
type AnnotationValidationNodeEdge {
  """The item at the end of the edge"""
  node: AnnotationValidationNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""AnnotationValidation schema"""
type AnnotationValidationNode implements Node {
  id: ID!
  annotation: AnnotationNode!
  isValid: Boolean
  createdAt: DateTime!
  lastUpdatedAt: DateTime!
}

type DeploymentMobilePositionNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DeploymentMobilePositionNodeEdge]!
}

"""
A Relay edge containing a `DeploymentMobilePositionNode` and its cursor.
"""
type DeploymentMobilePositionNodeEdge {
  """The item at the end of the edge"""
  node: DeploymentMobilePositionNode

  """A cursor for use in pagination"""
  cursor: String!
}

type DeploymentMobilePositionNode implements Node {
  id: ID!

  """Related deployment"""
  deployment: DeploymentNode!

  """Datetime for the mobile platform position"""
  datetime: DateTime!

  """Longitude of the mobile platform"""
  longitude: Float!

  """Latitude of the mobile platform"""
  latitude: Float!

  """Hydrophone depth of the mobile platform (In positive meters)"""
  depth: Float!

  """Heading of the mobile platform"""
  heading: Float

  """Pitch of the mobile platform"""
  pitch: Float

  """Roll of the mobile platform"""
  roll: Float
}

type SiteNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SiteNodeEdge]!
}

"""A Relay edge containing a `SiteNode` and its cursor."""
type SiteNodeEdge {
  """The item at the end of the edge"""
  node: SiteNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Project node"""
type WebsiteProjectNode implements Node {
  id: ID!
  title: String!
  intro: String!
  start: Date
  end: Date
  body: String!
  thumbnail: String!
  otherContacts: [String!]
  metadataxProject: ProjectNodeOverride
}

type SoundNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SoundNodeEdge]!
}

"""A Relay edge containing a `SoundNode` and its cursor."""
type SoundNodeEdge {
  """The item at the end of the edge"""
  node: SoundNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SoundNode implements Node {
  id: ID!
  englishName: String!
  frenchName: String
  codeName: String
  taxon: String
  parent: SoundNode
  relatedBibliography(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!
  children(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], labels_Id: Decimal, labels_Id_In: [ID], englishName: String, englishName_Icontains: String, frenchName: String, frenchName_Icontains: String, codeName: String, codeName_Icontains: String, taxon: String, taxon_Icontains: String): SoundNodeConnection!
  labels(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], sourceId: ID, sourceId_In: [ID], soundId: ID, soundId_In: [ID], parentId: ID, parentId_In: [ID], children_Id: Decimal, children_Id_In: [ID], nickname: String, nickname_Icontains: String, acousticDetectors_Id: Decimal, acousticDetectors_Id_In: [ID], channelConfigurationDetectorSpecifications_Id: Decimal, channelConfigurationDetectorSpecifications_Id_In: [ID], shape: SignalShapeEnum, plurality: SignalPluralityEnum, minFrequency: Int, minFrequency_Lt: Int, minFrequency_Lte: Int, minFrequency_Gt: Int, minFrequency_Gte: Int, maxFrequency: Int, maxFrequency_Lt: Int, maxFrequency_Lte: Int, maxFrequency_Gt: Int, maxFrequency_Gte: Int, meanDuration: Float, meanDuration_Lt: Float, meanDuration_Lte: Float, meanDuration_Gt: Float, meanDuration_Gte: Float, labels_Id: Decimal): LabelNodeConnection!
}

type SourceNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SourceNodeEdge]!
}

"""A Relay edge containing a `SourceNode` and its cursor."""
type SourceNodeEdge {
  """The item at the end of the edge"""
  node: SourceNode

  """A cursor for use in pagination"""
  cursor: String!
}

type AcousticDetectorSpecificationNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AcousticDetectorSpecificationNodeEdge]!
}

"""
A Relay edge containing a `AcousticDetectorSpecificationNode` and its cursor.
"""
type AcousticDetectorSpecificationNodeEdge {
  """The item at the end of the edge"""
  node: AcousticDetectorSpecificationNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SoundNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [SoundNode]!
  totalCount: Int
}

type SourceNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [SourceNode]!
  totalCount: Int
}

type AuthorNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AuthorNode]!
  totalCount: Int
}

type TagNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [TagNode]!
  totalCount: Int
}

type BibliographyNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [BibliographyNode]!
  totalCount: Int
}

type AcousticDetectorSpecificationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AcousticDetectorSpecificationNode]!
  totalCount: Int
}

type EquipmentNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [EquipmentNode]!
  totalCount: Int
}

type HydrophoneSpecificationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [HydrophoneSpecificationNode]!
  totalCount: Int
}

type MaintenanceNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [MaintenanceNode]!
  totalCount: Int
}

type MaintenanceTypeNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [MaintenanceTypeNode]!
  totalCount: Int
}

type PlatformNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [PlatformNode]!
  totalCount: Int
}

type PlatformTypeNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [PlatformTypeNode]!
  totalCount: Int
}

type RecorderSpecificationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [RecorderSpecificationNode]!
  totalCount: Int
}

type StorageSpecificationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [StorageSpecificationNode]!
  totalCount: Int
}

type AudioPropertiesNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AudioPropertiesNode]!
  totalCount: Int
}

type DetectionPropertiesNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [DetectionPropertiesNode]!
  totalCount: Int
}

type FileNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [FileNode]!
  totalCount: Int
}

type FileFormatNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [FileFormatNode]!
  totalCount: Int
}

type CampaignNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [CampaignNode]!
  totalCount: Int
}

type ChannelConfigurationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ChannelConfigurationNode]!
  totalCount: Int
}

type ChannelConfigurationDetectorSpecificationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ChannelConfigurationDetectorSpecificationNode]!
  totalCount: Int
}

type ChannelConfigurationRecorderSpecificationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ChannelConfigurationRecorderSpecificationNode]!
  totalCount: Int
}

type DeploymentNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [DeploymentNode]!
  totalCount: Int
}

type DeploymentMobilePositionNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [DeploymentMobilePositionNode]!
  totalCount: Int
}

type ProjectNodeOverrideNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ProjectNodeOverride]!
  totalCount: Int
}

type ProjectNode implements Node {
  id: ID!

  """Name of the project"""
  name: String!

  """Should have at least one 'Main Contact'"""
  contacts(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], role: RoleEnum, contact_Id: Decimal, contact_Id_In: [ID], contact_FirstName: String, contact_FirstName_Icontains: String, contact_LastName: String, contact_LastName_Icontains: String, contact_Mail: String, contact_Mail_Icontains: String, contact_Website: String, contact_Website_Icontains: String, institution_Id: Decimal, institution_Id_In: [ID], institution_Name: String, institution_Name_Icontains: String, institution_Mail: String, institution_Mail_Icontains: String, institution_Website: String, institution_Website_Icontains: String, deployments_Id: Decimal, deployments_Id_In: [ID], projects_Id: Decimal, projects_Id_In: [ID]): ContactRoleNodeConnection!
  accessibility: AccessibilityEnum

  """Digital Object Identifier of the data, if existing."""
  doi: String

  """
  Description of the type of the project (e.g., research, marine renewable energies, long monitoring,...).
  """
  projectType: ProjectTypeNode
  startDate: Date
  endDate: Date

  """Description of the goal of the project."""
  projectGoal: String
  financing: FinancingEnum
  relatedBibliography(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], title: String, title_Icontains: String, doi: String, tags_Name: String, tags_Name_In: [String], status: StatusEnum, publicationDate: Date, publicationDate_Lt: Date, publicationDate_Lte: Date, publicationDate_Gt: Date, publicationDate_Gte: Date, type: TypeEnum): BibliographyNodeConnection!

  """Project associated to this campaign"""
  campaigns(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, projectId: ID, projectId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID]): CampaignNodeConnection!

  """Project associated to this site"""
  sites(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], name: String, name_Icontains: String, projectId: ID, projectId_In: [ID], deployments_Id: Decimal, deployments_Id_In: [ID]): SiteNodeConnection!

  """Project associated to this deployment"""
  deployments(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, id_In: [ID], projectId: ID, projectId_In: [ID], siteId: ID, siteId_In: [ID], campaignId: ID, campaignId_In: [ID], platformId: ID, platformId_In: [ID], contacts_Id: Decimal, contacts_Id_In: [ID], mobilePositions_Id: Decimal, mobilePositions_Id_In: [ID], channelConfigurations_Id: Decimal, channelConfigurations_Id_In: [ID], longitude: Float, longitude_Lt: Float, longitude_Lte: Float, longitude_Gt: Float, longitude_Gte: Float, latitude: Float, latitude_Lt: Float, latitude_Lte: Float, latitude_Gt: Float, latitude_Gte: Float, name: String, name_Icontains: String, bathymetricDepth: Int, bathymetricDepth_Lt: Int, bathymetricDepth_Lte: Int, bathymetricDepth_Gt: Int, bathymetricDepth_Gte: Int, deploymentDate: DateTime, deploymentDate_Lt: DateTime, deploymentDate_Lte: DateTime, deploymentDate_Gt: DateTime, deploymentDate_Gte: DateTime, deploymentVessel: String, deploymentVessel_Icontains: String, recoveryDate: DateTime, recoveryDate_Lt: DateTime, recoveryDate_Lte: DateTime, recoveryDate_Gt: DateTime, recoveryDate_Gte: DateTime, recoveryVessel: String, recoveryVessel_Icontains: String, description_Icontains: String, project_WebsiteProject_Id: Decimal): DeploymentNodeConnection!
  websiteProject: WebsiteProjectNode
}

type ProjectTypeNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ProjectTypeNode]!
  totalCount: Int
}

type SiteNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [SiteNode]!
  totalCount: Int
}

type ContactNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ContactNode]!
  totalCount: Int
}

type ContactRoleNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ContactRoleNode]!
  totalCount: Int
}

type InstitutionNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [InstitutionNode]!
  totalCount: Int
}

type WebsiteProjectNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [WebsiteProjectNode]!
  totalCount: Int
}

"""Debugging information for the current query."""
type DjangoDebug {
  """Executed SQL queries for this API query."""
  sql: [DjangoDebugSQL]

  """Raise exceptions for this API query."""
  exceptions: [DjangoDebugException]
}

"""Represents a single database query made to a Django managed DB."""
type DjangoDebugSQL {
  """The type of database being used (e.g. postrgesql, mysql, sqlite)."""
  vendor: String!

  """The Django database alias (e.g. 'default')."""
  alias: String!

  """The actual SQL sent to this database."""
  sql: String

  """Duration of this database query in seconds."""
  duration: Float!

  """The raw SQL of this query, without params."""
  rawSql: String!

  """JSON encoded database query parameters."""
  params: String!

  """Start time of this database query."""
  startTime: Float!

  """Stop time of this database query."""
  stopTime: Float!

  """Whether this database query took more than 10 seconds."""
  isSlow: Boolean!

  """Whether this database query was a SELECT."""
  isSelect: Boolean!

  """Postgres transaction ID if available."""
  transId: String

  """Postgres transaction status if available."""
  transStatus: String

  """Postgres isolation level if available."""
  isoLevel: String

  """Postgres connection encoding if available."""
  encoding: String
}

"""Represents a single exception raised."""
type DjangoDebugException {
  """The class of the exception"""
  excType: String!

  """The message of the exception"""
  message: String!

  """The stack trace"""
  stack: String!
}

type ColormapNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ColormapNode]!
  totalCount: Int
}

type DatasetNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [DatasetNode]!
  totalCount: Int
}

type FFTNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [FFTNode]!
  totalCount: Int
}

type LegacySpectrogramConfigurationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [LegacySpectrogramConfigurationNode]!
  totalCount: Int
}

type LinearScaleNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [LinearScaleNode]!
  totalCount: Int
}

type MultiLinearScaleNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [MultiLinearScaleNode]!
  totalCount: Int
}

"""Type for import dataset"""
type ImportDatasetType {
  name: String!
  path: String!
  legacy: Boolean
  analysis: [ImportSpectrogramAnalysisType]
}

"""Type for import dataset"""
type ImportSpectrogramAnalysisType {
  name: String!
  path: String!
}

type ArchiveNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ArchiveNode]!
  totalCount: Int
}

type AcousticFeaturesNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AcousticFeaturesNode]!
  totalCount: Int
}

type AnnotationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationNode]!
  totalCount: Int
}

type AnnotationCampaignNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationCampaignNode]!
  totalCount: Int
}

type AnnotationCommentNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationCommentNode]!
  totalCount: Int
}

type AnnotationFileRangeNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationFileRangeNode]!
  totalCount: Int
}

type AnnotationPhaseNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationPhaseNode]!
  totalCount: Int
}

type AnnotationTaskNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationTaskNode]!
  totalCount: Int
}

type AnnotationValidationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [AnnotationValidationNode]!
  totalCount: Int
}

type ConfidenceNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ConfidenceNode]!
  totalCount: Int
}

type ConfidenceSetNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [ConfidenceSetNode]!
  totalCount: Int
}

type DetectorNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [DetectorNode]!
  totalCount: Int
}

type DetectorConfigurationNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [DetectorConfigurationNode]!
  totalCount: Int
}

type LabelSetNodeNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfoExtra!

  """Contains the nodes in this connection."""
  results: [LabelSetNode]!
  totalCount: Int
}

"""Global mutation"""
type Mutation {
  postSource(input: PostSourceMutationInput!): PostSourceMutationPayload
  deleteSource(id: ID): DeleteSourceMutation
  postSound(input: PostSoundMutationInput!): PostSoundMutationPayload
  deleteSound(id: ID): DeleteSoundMutation
}

type PostSourceMutationPayload {
  id: Int
  relatedBibliography: String
  englishName: String
  latinName: String
  frenchName: String
  codeName: String
  taxon: String
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  ok: Boolean
  data: SourceNode
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input PostSourceMutationInput {
  id: Int
  englishName: String!
  latinName: String
  frenchName: String
  codeName: String
  taxon: String
  parent: String
  clientMutationId: String
}

type DeleteSourceMutation {
  ok: Boolean
}

type PostSoundMutationPayload {
  id: Int
  relatedBibliography: String
  associatedNames: String
  englishName: String
  frenchName: String
  codeName: String
  taxon: String
  parent: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  ok: Boolean
  data: SoundNode
  clientMutationId: String
}

input PostSoundMutationInput {
  id: Int
  englishName: String!
  frenchName: String
  codeName: String
  taxon: String
  parent: String
  clientMutationId: String
}

type DeleteSoundMutation {
  ok: Boolean
}