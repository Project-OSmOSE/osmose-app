# Generated by Django 3.2.25 on 2024-10-03 09:27

from django.conf import settings
from django.db import migrations
from django.db.models import Count, Min

from backend.api.models import AnnotationTask


def clean_duplicated_tasks(apps, schema_editor):
    task_model: AnnotationTask.__class__ = apps.get_model("api", "AnnotationTask")

    dupes = (
        task_model.objects.values(
            "annotation_campaign_id", "dataset_file_id", "annotator_id"
        )
        .annotate(count=Count("id"), lower_id=Min("id"))
        .order_by()
        .filter(count__gt=1)
    )
    print(f" > {dupes.count()} duplicated tasks", end=" ")

    for task in dupes:
        initial = task_model.objects.get(pk=task["lower_id"])
        duplicates = task_model.objects.filter(
            annotation_campaign_id=task["annotation_campaign_id"],
            dataset_file_id=task["dataset_file_id"],
            annotator_id=task["annotator_id"],
            id__gt=task["lower_id"],
        )
        if initial.status != AnnotationTask.Status.FINISHED:
            if duplicates.filter(status=AnnotationTask.Status.FINISHED).exists():
                initial.status = AnnotationTask.Status.FINISHED
                initial.save()
            if (
                initial.status != AnnotationTask.Status.STARTED
                and duplicates.filter(status=AnnotationTask.Status.STARTED).exists()
            ):
                initial.status = AnnotationTask.Status.STARTED
                initial.save()
        duplicates.delete()
    print("âœ“", end=" ")


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("api", "0055_fill_annotationfilerange"),
    ]

    operations = [
        migrations.RunPython(
            clean_duplicated_tasks, reverse_code=migrations.RunPython.noop
        ),
    ]
