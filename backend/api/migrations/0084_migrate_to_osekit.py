# Generated by Django 3.2.25 on 2025-07-17 08:47

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("equipment", "0002_maintenance_maintainer_institution"),
        ("api", "0083_update_filerange_bornes_to_datetime"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("ontology", "0002_link_to_bibliography"),
        ("metadatax", "0025_migrate_database"),
    ]

    operations = [
        migrations.RenameModel(
            old_name="AnnotationCampaignArchive",
            new_name="Archive",
        ),
        migrations.AlterField(
            model_name="annotationcampaign",
            name="archive",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="annotation_campaign",
                to="api.archive",
            ),
        ),
        migrations.AlterField(
            model_name="archive",
            name="by_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="archives",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RenameModel(
            old_name="AnnotationSession",
            new_name="Session",
        ),
        migrations.CreateModel(
            name="AnnotationTaskSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "annotation_task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.annotationtask",
                    ),
                ),
                (
                    "session",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="api.session"
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="annotationcampaign",
            name="label_set",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="api.labelset",
            ),
        ),
        migrations.AddField(
            model_name="annotationtask",
            name="sessions",
            field=models.ManyToManyField(
                related_name="annotation_tasks",
                through="api.AnnotationTaskSession",
                to="api.Session",
            ),
        ),
        migrations.AlterModelTable(
            name="session",
            table=None,
        ),
        migrations.RunSQL(
            sql="INSERT INTO api_annotationtasksession (session_id, annotation_task_id) SELECT id, annotation_task_id FROM api_session",
            reverse_sql="UPDATE api_session s SET annotation_task_id = r.annotation_task_id FROM api_annotationtasksession r                WHERE r.session_id = s.id            ",
        ),
        migrations.RemoveField(
            model_name="session",
            name="annotation_task",
        ),
        migrations.CreateModel(
            name="Colormap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.RunSQL(
            sql="INSERT INTO api_colormap (name) SELECT distinct colormap FROM api_spectrogramconfiguration",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="FFT",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nfft", models.IntegerField()),
                ("window", models.TextField(blank=True, null=True)),
                ("window_size", models.IntegerField()),
                ("overlap", models.DecimalField(decimal_places=2, max_digits=3)),
                ("sampling_frequency", models.PositiveIntegerField()),
                ("scaling", models.CharField(blank=True, max_length=50, null=True)),
                ("legacy", models.BooleanField(default=False)),
            ],
        ),
        migrations.AddConstraint(
            model_name="fft",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("legacy", True),
                    models.Q(
                        ("legacy", False),
                        ("scaling__isnull", False),
                        ("window__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="fft_legacy",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="fft",
            unique_together={
                ("nfft", "window_size", "window", "overlap", "sampling_frequency")
            },
        ),
        migrations.RunSQL(
            sql="            INSERT INTO api_fft (nfft, window_size, overlap, sampling_frequency, legacy)            SELECT DISTINCT                c.nfft,                c.window_size,                round(c.overlap) / 100,                a.dataset_sr,                true            FROM api_spectrogramconfiguration c            LEFT JOIN datasets d on d.id = c.dataset_id            LEFT JOIN audio_metadata a on d.audio_metadatum_id = a.id          ",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="LegacySpectrogramConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("folder", models.CharField(max_length=255)),
                ("zoom_level", models.IntegerField()),
                ("hp_filter_min_frequency", models.IntegerField()),
                ("data_normalization", models.CharField(max_length=255)),
                ("frequency_resolution", models.FloatField()),
                ("spectrogram_normalization", models.CharField(max_length=255)),
                (
                    "zscore_duration",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "window_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("peak_voltage", models.FloatField(blank=True, null=True)),
                ("sensitivity_dB", models.FloatField(blank=True, null=True)),
                ("temporal_resolution", models.FloatField(blank=True, null=True)),
                (
                    "linear_frequency_scale",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.linearscale",
                    ),
                ),
                (
                    "multi_linear_frequency_scale",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.multilinearscale",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="legacyspectrogramconfiguration",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("linear_frequency_scale__isnull", True),
                        ("multi_linear_frequency_scale__isnull", False),
                    ),
                    models.Q(
                        ("linear_frequency_scale__isnull", False),
                        ("multi_linear_frequency_scale__isnull", True),
                    ),
                    models.Q(
                        ("linear_frequency_scale__isnull", True),
                        ("multi_linear_frequency_scale__isnull", True),
                    ),
                    _connector="OR",
                ),
                name="legacy_spectrogram_configuration_max_one_scale",
            ),
        ),
        migrations.RunSQL(
            sql='            INSERT INTO api_legacyspectrogramconfiguration (id, folder, zoom_level, hp_filter_min_frequency, data_normalization, spectrogram_normalization, frequency_resolution, zscore_duration, window_type, peak_voltage, "sensitivity_dB", temporal_resolution, linear_frequency_scale_id, multi_linear_frequency_scale_id)            SELECT                 c.id,                c.name,                c.zoom_level,                c.hp_filter_min_freq,                c.data_normalization,                c.spectro_normalization,                c.frequency_resolution,                c.zscore_duration,                wt.name,                c.peak_voltage,                c."sensitivity_dB",                c.temporal_resolution,                c.linear_frequency_scale_id,                c.multi_linear_frequency_scale_id            FROM api_spectrogramconfiguration c            LEFT JOIN api_windowtype wt on c.window_type_id = wt.id          ',
            reverse_sql="",
        ),
        migrations.RenameModel(
            old_name="Dataset",
            new_name="OldDataset",
        ),
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("path", models.CharField(max_length=255)),
                ("legacy", models.BooleanField(default=False)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_channel_configurations",
                    models.ManyToManyField(
                        related_name="datasets", to="metadatax.ChannelConfiguration"
                    ),
                ),
            ],
            options={
                "ordering": ("-created_at",),
                "unique_together": {("name", "path")},
            },
        ),
        migrations.RunSQL(
            sql='            INSERT INTO api_dataset (id, created_at, name, description, path, owner_id, legacy)            SELECT id, created_at, name, "desc", dataset_path, owner_id, true from datasets;            INSERT INTO api_dataset_related_channel_configurations (dataset_id, channelconfiguration_id)            SELECT olddataset_id, channelconfiguration_id from datasets_related_channel_configuration;            ',
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="SpectrogramAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("path", models.CharField(max_length=255)),
                (
                    "data_duration",
                    models.FloatField(
                        blank=True,
                        help_text="Duration of the segmented data (in s)",
                        null=True,
                    ),
                ),
                ("dynamic_min", models.FloatField()),
                ("dynamic_max", models.FloatField()),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("legacy", models.BooleanField(default=False)),
                (
                    "colormap",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="spectrogram_analysis",
                        to="api.colormap",
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="spectrogram_analysis",
                        to="api.dataset",
                    ),
                ),
                (
                    "fft",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="spectrogram_analysis",
                        to="api.fft",
                    ),
                ),
                (
                    "legacy_configuration",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="spectrogram_analysis",
                        to="api.legacyspectrogramconfiguration",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        related_name="spectrogram_analysis",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Spectrogram analysis",
                "ordering": ("-created_at",),
            },
        ),
        migrations.AddConstraint(
            model_name="spectrogramanalysis",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("data_duration__isnull", False), ("legacy", False)),
                    models.Q(("legacy", True), ("legacy_configuration__isnull", False)),
                    _connector="OR",
                ),
                name="spectrogram_analysis_legacy",
            ),
        ),
        migrations.RunSQL(
            sql="            INSERT INTO api_spectrogramanalysis (id, created_at, name, path, owner_id, legacy, dataset_id, data_duration, fft_id, colormap_id,legacy_configuration_id, dynamic_min, dynamic_max, start_date, end_date)            SELECT                 c.id,                d.created_at,                c.name,                concat('processed/spectrogram/', d.dataset_conf, '/', c.name),                d.owner_id,                true,                d.id,                c.spectro_duration,                fft.id,                colormap.id,                c.id,                c.dynamic_min,                c.dynamic_max,                d.start_date,                d.end_date            FROM api_spectrogramconfiguration c            LEFT JOIN datasets d on d.id = c.dataset_id            LEFT JOIN (SELECT id, dataset_sr FROM audio_metadata) a on a.id = d.audio_metadatum_id            LEFT JOIN api_fft fft on fft.nfft = c.nfft and fft.window_size = c.window_size and fft.overlap = round(c.overlap) / 100 and fft.sampling_frequency = a.dataset_sr            LEFT JOIN api_colormap colormap on colormap.name = c.colormap            ",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="Spectrogram",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filename", models.CharField(max_length=255)),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField()),
                (
                    "format",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="data.fileformat",
                    ),
                ),
                (
                    "analysis",
                    models.ManyToManyField(
                        related_name="spectrograms", to="api.SpectrogramAnalysis"
                    ),
                ),
            ],
            options={
                "ordering": ("start", "id"),
            },
        ),
        migrations.RunSQL(
            sql="            INSERT INTO metadatax_data_fileformat (name) VALUES ('png')          ",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="""INSERT INTO api_spectrogram (id, filename, format_id, start, \"end\")
                   SELECT DISTINCT 
                        f.id,
                        substring(f.filename, 0, position('.' in f.filename)),
                        (SELECT id FROM metadatax_data_fileformat WHERE name='png'),
                        f.start, 
                        f.end 
                   FROM dataset_files f""",
            reverse_sql="",
        ),
        migrations.RunSQL(
            sql="""INSERT INTO api_spectrogram_analysis (spectrogramanalysis_id, spectrogram_id)
                   SELECT 
                        c.id,
                        s.id 
                   FROM dataset_files f 
                   LEFT JOIN api_spectrogram s ON s.filename = substring(f.filename, 0, position('.' in f.filename))
                   LEFT JOIN datasets d on d.id = f.dataset_id           
                   LEFT JOIN api_spectrogramconfiguration c on c.dataset_id = d.id;""",
            reverse_sql="",
        ),
        migrations.CreateModel(
            name="AnnotationCampaignAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="api.spectrogramanalysis",
                    ),
                ),
                (
                    "annotation_campaign",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.annotationcampaign",
                    ),
                ),
            ],
            options={
                "unique_together": {("annotation_campaign", "analysis")},
            },
        ),
        migrations.AddField(
            model_name="annotationcampaign",
            name="analysis",
            field=models.ManyToManyField(
                related_name="annotation_campaigns",
                through="api.AnnotationCampaignAnalysis",
                to="api.SpectrogramAnalysis",
            ),
        ),
        migrations.RunSQL(
            sql="            INSERT INTO api_annotationcampaignanalysis (analysis_id, annotation_campaign_id)            SELECT                 spectrogramconfiguration_id,                annotationcampaign_id            FROM annotation_campaigns_spectro_configs          ",
            reverse_sql="",
        ),
        migrations.RemoveField(
            model_name="annotationcampaign",
            name="spectro_configs",
        ),
        migrations.AddField(
            model_name="annotationcampaign",
            name="dataset",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="annotation_campaigns",
                to="api.dataset",
            ),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="            UPDATE annotation_campaigns c            SET dataset_id = d.olddataset_id            FROM annotation_campaigns_datasets d            WHERE c.id = d.annotationcampaign_id          ",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="annotationcampaign",
            name="dataset",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="annotation_campaigns",
                to="api.dataset",
            ),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name="annotationcampaign",
            name="datasets",
        ),
        migrations.AddField(
            model_name="AnnotationResult",
            name="spectrogram",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_results",
                to="api.spectrogram",
            ),
        ),
        migrations.RunSQL(
            sql="            UPDATE annotation_results r            SET spectrogram_id = s.id            FROM dataset_files f            LEFT JOIN api_spectrogram s on s.filename = substring(f.filename, 0, position('.' in f.filename))            WHERE f.id = r.dataset_file_id          ",
            reverse_sql="",
        ),
        migrations.RemoveField(
            model_name="annotationresult",
            name="dataset_file",
        ),
        migrations.AddField(
            model_name="AnnotationComment",
            name="spectrogram",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_comments",
                to="api.spectrogram",
            ),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="            UPDATE annotation_comment c            SET spectrogram_id = s.id            FROM dataset_files f            LEFT JOIN api_spectrogram s on s.filename = substring(f.filename, 0, position('.' in f.filename))            WHERE f.id = c.dataset_file_id          ",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="AnnotationComment",
            name="spectrogram",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_comments",
                to="api.spectrogram",
            ),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name="annotationcomment",
            name="dataset_file",
        ),
        migrations.AddField(
            model_name="annotationtask",
            name="spectrogram",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="annotation_tasks",
                to="api.spectrogram",
            ),
            preserve_default=False,
        ),
        migrations.RunSQL(
            sql="            UPDATE api_annotationtask t            SET spectrogram_id = s.id            FROM dataset_files f            LEFT JOIN api_spectrogram s on s.filename = substring(f.filename, 0, position('.' in f.filename))            WHERE f.id = t.dataset_file_id          ",
            reverse_sql="",
        ),
        migrations.AlterField(
            model_name="annotationtask",
            name="spectrogram",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="annotation_tasks",
                to="api.spectrogram",
            ),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name="annotationtask",
            unique_together={("spectrogram", "annotation_campaign_phase", "annotator")},
        ),
        migrations.AlterModelOptions(
            name="annotationtask",
            options={"ordering": ["spectrogram__start", "id"]},
        ),
        migrations.RemoveField(
            model_name="annotationtask",
            name="dataset_file",
        ),
        migrations.DeleteModel(
            name="SpectrogramConfiguration",
        ),
        migrations.DeleteModel(
            name="DatasetType",
        ),
        migrations.DeleteModel(
            name="DatasetFile",
        ),
        migrations.DeleteModel(
            name="FileSubtype",
        ),
        migrations.DeleteModel(
            name="WindowType",
        ),
        migrations.DeleteModel(
            name="OldDataset",
        ),
        migrations.DeleteModel(
            name="AudioMetadatum",
        ),
        migrations.DeleteModel(
            name="GeoMetadatum",
        ),
        migrations.RenameField(
            model_name="annotationcampaign",
            old_name="confidence_indicator_set",
            new_name="confidence_set",
        ),
        migrations.RemoveField(
            model_name="annotationcampaign",
            name="annotation_scope",
        ),
        migrations.AlterField(
            model_name="annotationcampaign",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AlterModelTable(
            name="annotationcampaign",
            table=None,
        ),
        migrations.RenameModel(
            old_name="AnnotationCampaignPhase",
            new_name="AnnotationPhase",
        ),
        migrations.RenameModel(
            old_name="AnnotationResultAcousticFeatures",
            new_name="AcousticFeatures",
        ),
        migrations.RenameModel(
            old_name="ConfidenceIndicator",
            new_name="Confidence",
        ),
        migrations.RenameModel(
            old_name="ConfidenceIndicatorSet",
            new_name="ConfidenceSet",
        ),
        migrations.RenameField(
            model_name="confidenceindicatorsetindicator",
            old_name="confidence_indicator_set",
            new_name="confidence_set",
        ),
        migrations.RenameField(
            model_name="confidenceindicatorsetindicator",
            old_name="confidence_indicator",
            new_name="confidence",
        ),
        migrations.RemoveConstraint(
            model_name="confidenceindicatorsetindicator",
            name="one_default_indicator_by_set",
        ),
        migrations.RemoveConstraint(
            model_name="confidenceindicatorsetindicator",
            name="no_duplicate_indicator_in_set",
        ),
        migrations.AddConstraint(
            model_name="confidenceindicatorsetindicator",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("is_default", "confidence_set"),
                name="one_default_confidence_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="confidenceindicatorsetindicator",
            constraint=models.UniqueConstraint(
                fields=("confidence", "confidence_set"),
                name="no_duplicate_confidence_in_set",
            ),
        ),
        migrations.AlterField(
            model_name="label",
            name="metadatax_label",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="ontology.label",
            ),
        ),
        migrations.AddField(
            model_name="detector",
            name="specification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="equipment.acousticdetectorspecification",
            ),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="Annotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[("W", "Weak"), ("P", "Point"), ("B", "Box")],
                        help_text="Type of the annotation",
                    ),
                ),
                ("start_time", models.FloatField(blank=True, null=True)),
                ("end_time", models.FloatField(blank=True, null=True)),
                ("start_frequency", models.FloatField(blank=True, null=True)),
                ("end_frequency", models.FloatField(blank=True, null=True)),
                (
                    "annotator_expertise_level",
                    models.TextField(
                        blank=True,
                        choices=[("E", "Expert"), ("A", "Average"), ("N", "Novice")],
                        help_text="Expertise level of the annotator.",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated_at", models.DateTimeField(auto_now=True)),
                (
                    "acoustic_features",
                    models.OneToOneField(
                        blank=True,
                        help_text="Acoustic features add a better description to the signal",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="annotation_result",
                        to="api.acousticfeatures",
                    ),
                ),
                (
                    "annotation_phase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="api.annotationphase",
                    ),
                ),
                (
                    "annotator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotation_results",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "confidence",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="api.confidence",
                    ),
                ),
                (
                    "detector_configuration",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotation_results",
                        to="api.detectorconfiguration",
                    ),
                ),
                (
                    "is_update_of",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_to",
                        to="api.annotation",
                    ),
                ),
                (
                    "label",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.label"
                    ),
                ),
                (
                    "spectrogram",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotation_results",
                        to="api.spectrogram",
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            sql="            INSERT INTO api_annotation (id, type, start_time, end_time, start_frequency, end_frequency, annotator_expertise_level, created_at, last_updated_at, acoustic_features_id, annotation_phase_id, annotator_id, confidence_id, detector_configuration_id, is_update_of_id, label_id, spectrogram_id)            SELECT                r.id,                r.type,                r.start_time,                r.end_time,                r.start_frequency,                r.end_frequency,                r.annotator_expertise_level,                r.created_at,                r.last_updated_at,                r.acoustic_features_id,                r.annotation_campaign_phase_id,                r.annotator_id,                r.confidence_indicator_id,                r.detector_configuration_id,                r.is_update_of_id,                r.label_id, r.spectrogram_id FROM annotation_results r",
        ),
        migrations.AddConstraint(
            model_name="annotation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("annotator__isnull", True),
                        ("detector_configuration__isnull", False),
                    ),
                    models.Q(
                        ("annotator__isnull", False),
                        ("detector_configuration__isnull", True),
                    ),
                    _connector="OR",
                ),
                name="require_user_or_detector",
            ),
        ),
        migrations.AddConstraint(
            model_name="annotation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("end_frequency__isnull", True),
                        ("end_time__isnull", True),
                        ("start_frequency__isnull", True),
                        ("start_time__isnull", True),
                        ("type", "W"),
                    ),
                    models.Q(
                        ("end_frequency__isnull", True),
                        ("end_time__isnull", True),
                        ("start_frequency__isnull", False),
                        ("start_time__isnull", False),
                        ("type", "P"),
                    ),
                    models.Q(
                        ("end_frequency__isnull", False),
                        ("end_time__isnull", False),
                        ("start_frequency__isnull", False),
                        ("start_time__isnull", False),
                        ("type", "B"),
                    ),
                    _connector="OR",
                ),
                name="Annotation type",
            ),
        ),
        migrations.RenameModel(
            old_name="AnnotationResultValidation",
            new_name="AnnotationValidation",
        ),
        migrations.RenameField(
            model_name="AnnotationValidation",
            old_name="result",
            new_name="annotation",
        ),
        migrations.AlterField(
            model_name="AnnotationValidation",
            name="annotation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="validations",
                to="api.annotation",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="AnnotationValidation",
            unique_together={("annotation", "annotator")},
        ),
        migrations.RenameField(
            model_name="AnnotationComment",
            old_name="annotation_campaign_phase",
            new_name="annotation_phase",
        ),
        migrations.AlterField(
            model_name="annotationcomment",
            name="annotation_phase",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_comments",
                to="api.annotationphase",
            ),
        ),
        migrations.RenameField(
            model_name="AnnotationComment",
            old_name="annotation_result",
            new_name="annotation",
        ),
        migrations.AlterField(
            model_name="AnnotationComment",
            name="annotation",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_comments",
                to="api.annotation",
            ),
        ),
        migrations.AlterField(
            model_name="AnnotationComment",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_comments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterModelTable(
            name="annotationcomment",
            table=None,
        ),
        migrations.RenameField(
            model_name="AnnotationFileRange",
            old_name="annotation_campaign_phase",
            new_name="annotation_phase",
        ),
        migrations.AlterField(
            model_name="annotationfilerange",
            name="annotation_phase",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_file_ranges",
                to="api.annotationphase",
            ),
        ),
        migrations.RenameField(
            model_name="AnnotationTask",
            old_name="annotation_campaign_phase",
            new_name="annotation_phase",
        ),
        migrations.AlterField(
            model_name="annotationtask",
            name="annotation_phase",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotation_tasks",
                to="api.annotationphase",
            ),
        ),
        migrations.AlterField(
            model_name="annotationtask",
            name="status",
            field=models.TextField(
                choices=[("C", "Created"), ("F", "Finished")], default="C"
            ),
        ),
        migrations.DeleteModel(
            name="AnnotationResult",
        ),
        migrations.AlterField(
            model_name="annotation",
            name="acoustic_features",
            field=models.OneToOneField(
                blank=True,
                help_text="Acoustic features add a better description to the signal",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="annotation",
                to="api.acousticfeatures",
            ),
        ),
        migrations.AlterField(
            model_name="annotation",
            name="annotator",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="annotation",
            name="detector_configuration",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotations",
                to="api.detectorconfiguration",
            ),
        ),
        migrations.AlterField(
            model_name="annotation",
            name="spectrogram",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="annotations",
                to="api.spectrogram",
            ),
        ),
        migrations.AlterField(
            model_name="spectrogram",
            name="format",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="metadatax.fileformat"
            ),
        ),
        migrations.RenameField(
            model_name="annotationcampaign",
            old_name="desc",
            new_name="description",
        ),
        migrations.AlterField(
            model_name="annotationcampaign",
            name="instructions_url",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.RenameField(
            model_name="labelset",
            old_name="desc",
            new_name="description",
        ),
    ]
