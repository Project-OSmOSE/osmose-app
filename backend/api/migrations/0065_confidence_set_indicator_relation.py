# Generated by Django 3.2.25 on 2024-12-19 08:28

import django.db.models.deletion
from django.db import migrations, models


def migrate_relation(apps, schema_editor):
    set = apps.get_model("api", "ConfidenceIndicatorSet")
    relation = apps.get_model("api", "ConfidenceIndicatorSetIndicator")
    relations = []
    for confidence_set in set.objects.all():
        for confidence_indicator in confidence_set.old_confidence_indicators.all():
            relations.append(
                relation(
                    confidence_indicator=confidence_indicator,
                    confidence_indicator_set=confidence_set,
                    is_default=confidence_indicator.is_default,
                )
            )
    relation.objects.bulk_create(relations)


def reverse_migrate_relation(apps, schema_editor):
    relation = apps.get_model("api", "ConfidenceIndicatorSetIndicator")
    for confidence_relation in relation.objects.all():
        confidence_relation.confidence_indicator.old_confidence_indicator_set = (
            confidence_relation.confidence_indicator_set
        )
        confidence_relation.confidence_indicator.is_default = (
            confidence_relation.is_default
        )
        confidence_relation.confidence_indicator.save()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0064_sample_bits"),
    ]

    operations = [
        # Clean
        migrations.AlterUniqueTogether(
            name="confidenceindicator",
            unique_together=set(),
        ),
        migrations.AlterModelTable(
            name="confidenceindicator",
            table=None,
        ),
        migrations.RemoveConstraint(
            model_name="confidenceindicator",
            name="one_default_by_confidence_indicator_set",
        ),
        # Rename "old" relation
        migrations.AlterField(
            model_name="confidenceindicator",
            name="confidence_indicator_set",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="old_confidence_indicators",
                to="api.confidenceindicatorset",
                verbose_name="Included in this set :",
                null=True,
            ),
        ),
        migrations.RenameField(
            model_name="confidenceindicator",
            old_name="confidence_indicator_set",
            new_name="old_confidence_indicator_set",
        ),
        # Create new relation model
        migrations.CreateModel(
            name="ConfidenceIndicatorSetIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_default", models.BooleanField(default=False)),
                (
                    "confidence_indicator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="set_relations",
                        to="api.confidenceindicator",
                    ),
                ),
                (
                    "confidence_indicator_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicator_relations",
                        to="api.confidenceindicatorset",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="confidenceindicatorsetindicator",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("is_default", "confidence_indicator_set"),
                name="one_default_indicator_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="confidenceindicatorsetindicator",
            constraint=models.UniqueConstraint(
                fields=("confidence_indicator", "confidence_indicator_set"),
                name="no_duplicate_indicator_in_set",
            ),
        ),
        # Add new relation
        migrations.AddField(
            model_name="confidenceindicatorset",
            name="confidence_indicators",
            field=models.ManyToManyField(
                related_name="confidence_indicator_sets",
                through="api.ConfidenceIndicatorSetIndicator",
                to="api.ConfidenceIndicator",
            ),
        ),
        # Migrate info to new relation
        migrations.RunPython(migrate_relation, reverse_migrate_relation),
        # Remove old relation
        migrations.RemoveField(
            model_name="confidenceindicator",
            name="is_default",
        ),
        migrations.RemoveField(
            model_name="confidenceindicator",
            name="old_confidence_indicator_set",
        ),
    ]
