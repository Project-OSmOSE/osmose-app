# Generated by Django 3.2.25 on 2025-05-28 09:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('osmosewebsite', '0025_alter_scientifictalk_intro'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('name', models.CharField(blank=True, help_text='Required if no team member is provided', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bibliography',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('doi', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('publication_status', models.CharField(choices=[('D', 'Draft'), ('R', 'In Review'), ('P', 'Published')], max_length=1)),
                ('publication_date', models.DateField(blank=True, help_text='Required for any published bibliography', null=True)),
                ('type', models.CharField(choices=[('S', 'Software'), ('A', 'Article')], max_length=1)),
                ('journal', models.CharField(blank=True, help_text='Required for an article', max_length=255, null=True)),
                ('volumes', models.CharField(blank=True, max_length=255, null=True)),
                ('pages_from', models.PositiveIntegerField(blank=True, null=True)),
                ('pages_to', models.PositiveIntegerField(blank=True, null=True)),
                ('issue_nb', models.PositiveIntegerField(blank=True, null=True)),
                ('article_nb', models.PositiveIntegerField(blank=True, null=True)),
                ('publication_place', models.CharField(blank=True, help_text='Required for a software', max_length=255, null=True)),
                ('repository_url', models.URLField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Bibliography',
            },
        ),
        migrations.AddConstraint(
            model_name='bibliography',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('publication_date__isnull', False), ('publication_status', 'P')), models.Q(('publication_status', 'P'), _negated=True), _connector='OR'), name='Published publication has a publication date'),
        ),
        migrations.AddConstraint(
            model_name='bibliography',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('type', 'A'), _negated=True), models.Q(('journal__isnull', False), ('type', 'A')), _connector='OR'), name='Article has required fields'),
        ),
        migrations.AddConstraint(
            model_name='bibliography',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('type', 'S'), _negated=True), models.Q(('publication_place__isnull', False), ('type', 'S')), _connector='OR'), name='Software has required fields'),
        ),
        migrations.AddField(
            model_name='author',
            name='bibliography',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='osmosewebsite.bibliography'),
        ),
        migrations.AddField(
            model_name='author',
            name='team_member',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='authors', to='osmosewebsite.teammember'),
        ),
        migrations.AddConstraint(
            model_name='author',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('name__isnull', False), ('team_member__isnull', True)), models.Q(('name__isnull', True), ('team_member__isnull', False)), _connector='OR'), name='Author has a name XOR a team member'),
        ),
        migrations.AlterUniqueTogether(
            name='author',
            unique_together={('order', 'bibliography')},
        ),
    ]
