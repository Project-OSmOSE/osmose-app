# Generated by Django 3.2.25 on 2025-07-03 07:28

from django.db import migrations, models


class MigrationAction:
    def __init__(self, apps, _):
        self.TeamMember = apps.get_model("osmosewebsite", "TeamMember")
        self.Bibliography = apps.get_model("bibliography", "Bibliography")
        self.BibliographySoftware = apps.get_model(
            "bibliography", "BibliographySoftware"
        )
        self.BibliographyArticle = apps.get_model("bibliography", "BibliographyArticle")
        self.BibliographyConference = apps.get_model(
            "bibliography", "BibliographyConference"
        )
        self.BibliographyPoster = apps.get_model("bibliography", "BibliographyPoster")
        self.Tag = apps.get_model("bibliography", "Tag")
        self.Author = apps.get_model("bibliography", "Author")
        self.Contact = apps.get_model("common", "Contact")
        self.Institution = apps.get_model("common", "Institution")

        for member in self.TeamMember.objects.all():
            self.update_member(member)

        for biblio in apps.get_model("osmosewebsite", "Bibliography").objects.all():
            self.migrate_biblio(biblio)

        for scientist in apps.get_model("osmosewebsite", "Scientist").objects.all():
            for institution in scientist.institutions.all():
                scientist.metadatax_institutions.add(self.get_institution(institution))

    def migrate_biblio(self, old_biblio):
        additional_information = {}
        if old_biblio.type == "S":
            additional_information[
                "software_information"
            ] = self.BibliographySoftware.objects.create(
                publication_place=old_biblio.publication_place,
                repository_url=old_biblio.repository_url,
            )
        if old_biblio.type == "A":
            additional_information[
                "article_information"
            ] = self.BibliographyArticle.objects.create(
                journal=old_biblio.journal,
                volumes=old_biblio.volumes,
                pages_from=old_biblio.pages_from,
                pages_to=old_biblio.pages_to,
                issue_nb=old_biblio.issue_nb,
                article_nb=old_biblio.article_nb,
            )
        if old_biblio.type == "C":
            additional_information[
                "conference_information"
            ] = self.BibliographyConference.objects.create(
                conference_name=old_biblio.conference,
                conference_location=old_biblio.conference_location,
                conference_abstract_book_url=old_biblio.conference_abstract_book_url,
            )
        if old_biblio.type == "P":
            additional_information[
                "poster_information"
            ] = self.BibliographyPoster.objects.create(
                poster_url=old_biblio.poster_url,
            )
            if (
                old_biblio.conference is not None
                and old_biblio.conference_location is not None
            ):
                additional_information[
                    "conference_information"
                ] = self.BibliographyConference.objects.create(
                    conference_name=old_biblio.conference,
                    conference_location=old_biblio.conference_location,
                    conference_abstract_book_url=old_biblio.conference_abstract_book_url,
                )
        new_biblio = self.Bibliography.objects.create(
            title=old_biblio.title,
            doi=old_biblio.doi,
            status=old_biblio.publication_status,
            type=old_biblio.type,
            publication_date=old_biblio.publication_date,
            **additional_information,
        )

        for tag in old_biblio.tags.all():
            new_tag, _ = self.Tag.objects.get_or_create(name=tag.name)
            new_biblio.tags.add(new_tag)

        for author in old_biblio.authors.all():
            self.get_author(author, new_biblio)

        new_biblio.save()

    def update_member(self, member):
        member.contact = self.get_contact(old_scientist=member.scientist)
        member.save()

    def get_author(self, old_author, biblio):
        new_author = self.Author.objects.create(
            order=old_author.order,
            bibliography=biblio,
            contact=self.get_contact(old_author.scientist),
        )
        for institution in old_author.institutions.all():
            new_institution, _ = self.Institution.objects.get_or_create(
                name=institution.name,
                city=institution.city,
                country=institution.country,
            )
            new_author.institutions.add(new_institution)
        new_author.save()
        return new_author

    def get_contact(self, old_scientist):
        contact, _ = self.Contact.objects.get_or_create(
            first_name=old_scientist.first_name,
            last_name=old_scientist.last_name,
        )
        for institution in old_scientist.institutions.all():
            contact.current_institutions.add(self.get_institution(institution))
        contact.save()
        return contact

    def get_institution(self, old_institution):
        new_institution, _ = self.Institution.objects.get_or_create(
            name=old_institution.name,
            city=old_institution.city,
            country=old_institution.country,
        )
        return new_institution


def log(apps, _):
    print("ok")


class Migration(migrations.Migration):

    dependencies = [
        ("osmosewebsite", "0033_alter_project_metadatax_project"),
        ("bibliography", "00002_make_information_nullable_by_default"),
    ]

    operations = [
        migrations.AddField(
            model_name="teammember",
            name="contact",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=models.deletion.RESTRICT,
                related_name="team_member",
                to="common.contact",
            ),
        ),
        migrations.RunPython(log, migrations.RunPython.noop),
        migrations.AddField(
            model_name="scientist",
            name="metadatax_institutions",
            field=models.ManyToManyField(
                blank=True, related_name="scientists", to="common.Institution"
            ),
        ),
        migrations.RunPython(MigrationAction, migrations.RunPython.noop),
        migrations.RunPython(log, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="scientist",
            name="institutions",
        ),
        migrations.RenameField(
            model_name="scientist",
            old_name="metadatax_institutions",
            new_name="institutions",
        ),
        migrations.RunPython(log, migrations.RunPython.noop),
        migrations.AlterField(
            model_name="teammember",
            name="contact",
            field=models.OneToOneField(
                on_delete=models.deletion.RESTRICT,
                related_name="team_member",
                to="common.contact",
            ),
        ),
        migrations.RunPython(log, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="teammember",
            name="scientist",
        ),
        migrations.RemoveField(
            model_name="bibliography",
            name="tags",
        ),
        migrations.DeleteModel(
            name="Author",
        ),
        migrations.DeleteModel(
            name="Bibliography",
        ),
        migrations.DeleteModel(
            name="BibliographyTag",
        ),
        migrations.DeleteModel(
            name="Institution",
        ),
        migrations.DeleteModel(
            name="Scientist",
        ),
    ]
