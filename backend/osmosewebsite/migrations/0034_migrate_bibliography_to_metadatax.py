# Generated by Django 3.2.25 on 2025-07-03 07:28

from django.db import migrations, models


def migrate(apps, schema_editor):
    OldBibliography = apps.get_model("osmosewebsite", "Bibliography")
    TeamMember = apps.get_model("osmosewebsite", "TeamMember")
    Bibliography = apps.get_model("bibliography", "Bibliography")
    BibliographySoftware = apps.get_model("bibliography", "BibliographySoftware")
    BibliographyArticle = apps.get_model("bibliography", "BibliographyArticle")
    BibliographyConference = apps.get_model("bibliography", "BibliographyConference")
    BibliographyPoster = apps.get_model("bibliography", "BibliographyPoster")
    Tag = apps.get_model("bibliography", "Tag")
    Author = apps.get_model("bibliography", "Author")
    Contact = apps.get_model("common", "Contact")
    Institution = apps.get_model("common", "Institution")

    for biblio in OldBibliography.objects.all():
        additional_information = {}
        if biblio.type == "S":
            additional_information[
                "software_information"
            ] = BibliographySoftware.objects.create(
                publication_place=biblio.publication_place,
                repository_url=biblio.repository_url,
            )
        if biblio.type == "A":
            additional_information[
                "article_information"
            ] = BibliographyArticle.objects.create(
                journal=biblio.journal,
                volumes=biblio.volumes,
                pages_from=biblio.pages_from,
                pages_to=biblio.pages_to,
                issue_nb=biblio.issue_nb,
                article_nb=biblio.article_nb,
            )
        if biblio.type == "C":
            additional_information[
                "conference_information"
            ] = BibliographyConference.objects.create(
                conference_name=biblio.conference,
                conference_location=biblio.conference_location,
                conference_abstract_book_url=biblio.conference_abstract_book_url,
            )
        if biblio.type == "P":
            additional_information[
                "poster_information"
            ] = BibliographyPoster.objects.create(
                poster_url=biblio.poster_url,
            )
            if biblio.conference is not None and biblio.conference_location is not None:
                additional_information[
                    "conference_information"
                ] = BibliographyConference.objects.create(
                    conference_name=biblio.conference,
                    conference_location=biblio.conference_location,
                    conference_abstract_book_url=biblio.conference_abstract_book_url,
                )
        new_biblio = Bibliography.objects.create(
            title=biblio.title,
            doi=biblio.doi,
            status=biblio.publication_status,
            type=biblio.type,
            publication_date=biblio.publication_date,
            **additional_information,
        )

        for tag in biblio.tags.all():
            new_tag, _ = Tag.objects.get_or_create(name=tag.name)
            new_biblio.tags.add(new_tag)

        for author in biblio.authors.all():
            contact, _ = Contact.objects.get_or_create(
                name=f"{author.scientist.first_name} {author.scientist.last_name}",
            )
            for institution in author.scientist.institutions.all():
                new_institution, _ = Institution.objects.get_or_create(
                    name=institution.name,
                    city=institution.city,
                    country=institution.country,
                )
                contact.current_institutions.add(new_institution)
            new_author = Author.objects.create(
                order=author.order,
                bibliography=new_biblio,
                contact=contact,
            )
            for institution in author.institutions.all():
                new_institution, _ = Institution.objects.get_or_create(
                    name=institution.name,
                    city=institution.city,
                    country=institution.country,
                )
                new_author.institutions.add(new_institution)

    for member in TeamMember.objects.all():
        contact, _ = Contact.objects.get_or_create(
            name=f"{member.scientist.first_name} {member.scientist.last_name}",
        )
        for institution in member.scientist.institutions.all():
            new_institution, _ = Institution.objects.get_or_create(
                name=institution.name,
                city=institution.city,
                country=institution.country,
            )
            contact.current_institutions.add(new_institution)

        member.contact = contact
        member.save()


class Migration(migrations.Migration):

    dependencies = [
        ("osmosewebsite", "0033_alter_project_metadatax_project"),
        ("bibliography", "00002_make_information_nullable_by_default"),
    ]

    operations = [
        migrations.AddField(
            model_name="teammember",
            name="contact",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=models.deletion.RESTRICT,
                related_name="team_member",
                to="common.contact",
            ),
        ),
        migrations.RunPython(migrate, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="bibliography",
            name="tags",
        ),
        migrations.RemoveField(
            model_name="teammember",
            name="scientist",
        ),
        migrations.AlterField(
            model_name="scientist",
            name="institutions",
            field=models.ManyToManyField(
                blank=True, related_name="scientists", to="common.Institution"
            ),
        ),
        migrations.AlterField(
            model_name="teammember",
            name="contact",
            field=models.OneToOneField(
                on_delete=models.deletion.RESTRICT,
                related_name="team_member",
                to="common.contact",
            ),
        ),
        migrations.DeleteModel(
            name="Author",
        ),
        migrations.DeleteModel(
            name="Bibliography",
        ),
        migrations.DeleteModel(
            name="BibliographyTag",
        ),
        migrations.DeleteModel(
            name="Institution",
        ),
        migrations.DeleteModel(
            name="Scientist",
        ),
    ]
